import { ChatSession } from "./ChatSession";
import { GroqService } from "../Services/GroqService";
import { ErrorService } from "../Services/ErrorService";
import { NotificationService } from "../Services/NotificationService";
import { ApiService } from "../Services/ApiService";
import { ApiAuthService } from "../Services/ApiAuthService";
import { ApiResponseParser } from "../Services/ApiResponseParser";
import { Message } from "../Models/Message";
import { DEFAULT_GROQ_CONFIG } from "../Services/GroqService";

const chat = new ChatSession();

// Criar inst√¢ncias dos servi√ßos necess√°rios
const notificationService = new NotificationService();
const errorService = new ErrorService(notificationService);
const apiService = new ApiService(errorService, notificationService);
const apiAuthService = new ApiAuthService(notificationService);
const apiResponseParser = new ApiResponseParser(notificationService);

// Criar inst√¢ncia do GroqService com todos os servi√ßos
const groq = new GroqService(
  errorService,
  notificationService,
  apiService,
  apiAuthService,
  apiResponseParser
);

export async function handleChatInteraction(input: string): Promise<string> {
  try {
    // Adicionar mensagem do usu√°rio ao hist√≥rico
    chat.addMessage("user", input);

    // Preparar mensagens para a API
    const messages: Message[] = chat.getMessages().map(msg => ({
      role: msg.role,
      content: msg.content
    }));

    // Configura√ß√£o do Groq
    const config = {
      ...DEFAULT_GROQ_CONFIG,
      model: "mixtral-8x7b-32768",
      max_tokens: 200,
      temperature: 0.5,
      stream: false
    };

    // Chamar a API do Groq
    const response = await groq.callAIAPI(
      messages,
      config,
      "ü§ñ ",
      config.url,
      undefined, // editor (n√£o necess√°rio para esta fun√ß√£o)
      false, // generateAtCursor
      undefined, // apiKey (ser√° obtido das configura√ß√µes)
      undefined // settings
    );

    // Processar resposta
    if (response && response.fullString) {
      const output = response.fullString.replace(/^ü§ñ\s*/, "").trim();
      chat.addMessage("assistant", output);
      return output;
    } else {
      throw new Error("Resposta vazia da API");
    }

  } catch (error: unknown) {
    console.error("Erro no chat interativo:", error);
    const errorMessage = error instanceof Error ? error.message : "Falha na comunica√ß√£o com Groq";
    
    // Em caso de erro, retornar uma resposta de fallback
    const fallbackResponse = "‚ö†Ô∏è Desculpe, n√£o consegui processar sua mensagem. Verifique sua conex√£o e tente novamente.";
    chat.addMessage("assistant", fallbackResponse);
    
    return fallbackResponse;
  }
}

export function resetChat(): void {
  chat.reset();
} 