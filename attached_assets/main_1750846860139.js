/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";var Le=Object.defineProperty;var _t=Object.getOwnPropertyDescriptor;var Mt=Object.getOwnPropertyNames;var Rt=Object.prototype.hasOwnProperty;var Pt=(c,t)=>{for(var e in t)Le(c,e,{get:t[e],enumerable:!0})},bt=(c,t,e,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of Mt(t))!Rt.call(c,i)&&i!==e&&Le(c,i,{get:()=>t[i],enumerable:!(r=_t(t,i))||r.enumerable});return c};var It=c=>bt(Le({},"__esModule",{value:!0}),c);var kt={};Pt(kt,{default:()=>Ie});module.exports=It(kt);var F=require("obsidian");var Ne=require("obsidian");var se=require("obsidian"),de=class extends se.Modal{constructor(t,e,r){super(t),this.folderName=e,this.folderPath=r,this.result=!1,this.modalPromise=new Promise(i=>{this.resolveModalPromise=i})}onOpen(){let{contentEl:t}=this;t.createEl("h2",{text:`[ChatGPT MD] No ${this.folderName} folder found.`}),t.createEl("p",{text:`If you choose "Yes, Create", the plugin will automatically create a folder at: ${this.folderPath}. You can change this path in the plugin settings.`}),new se.Setting(t).addButton(e=>e.setButtonText("Yes, Create Folder").setTooltip("Create folder").setCta().onClick(()=>{this.result=!0,this.resolveModalPromise(this.result),this.close()})),new se.Setting(t).addButton(e=>e.setButtonText("No, I'll create it myself").setTooltip("Cancel").setCta().onClick(()=>{this.result=!1,this.resolveModalPromise(this.result),this.close()}))}waitForModalValue(){return this.modalPromise}onClose(){let{contentEl:t}=this;t.empty()}};var He=async(c,t,e)=>{let r=new de(c,t,e);r.open();let i=await r.waitForModalValue();return i?(console.log("[ChatGPT MD] Creating folder"),await c.vault.createFolder(e)):console.log("[ChatGPT MD] Not creating folder"),i};var K=class{constructor(t){this.app=t}async writeInferredTitle(t,e){var n,a;let r=t.file;if(!r)throw new Error("No file is currently open");let i=this.sanitizeFileName(e),s=(a=(n=r.parent)==null?void 0:n.path)!=null?a:"/",o=`${s}/${i}.md`;for(let l=1;await this.app.vault.adapter.exists(o);l++)o=`${s}/${i} (${l}).md`;try{await this.app.fileManager.renameFile(r,o)}catch(l){throw new Ne.Notice("[ChatGPT MD] Error writing inferred title to editor"),console.log("[ChatGPT MD] Error writing inferred title to editor",l),l}}sanitizeFileName(t){return t.replace(/[\\/:*?"<>|]/g,"-")}async ensureFolderExists(t,e){return!await this.app.vault.adapter.exists(t)&&!await He(this.app,e,t)?(new Ne.Notice(`[ChatGPT MD] No ${e} found. One must be created to use the plugin. Set one in settings and make sure it exists.`),!1):!0}async createNewFile(t,e){return this.app.vault.create(t,e)}async readFile(t){return this.app.vault.read(t)}async getLinkedNoteContent(t){try{let e=this.app.metadataCache.getFirstLinkpathDest(t,"");return e?await this.app.vault.read(e):null}catch(e){return console.error(`Error reading linked note: ${t}`,e),null}}formatDate(t,e){return t.toISOString().replace(/[-:]/g,"").replace(/\..+/,"")}};var S="ollama",u="openai",g="openrouter",y="lmstudio",f="groq",Be={[u]:"/v1/chat/completions",[g]:"/api/v1/chat/completions",[S]:"/api/chat",[y]:"/v1/chat/completions",[f]:"/v1/chat/completions"},Ke="add-comment-block",je="add-hr",We="call-chatgpt-api",ze="stop-streaming",Ye="move-to-chat",Je="infer-title",Qe="choose-chat-template",Xe="clear-chat",Ze=`I am sorry. There was an authorization issue with the external API (Status 401).
Please check your API key in the settings`,et=`I am sorry. There was an issue reaching the network.
Please check your network connection.`,tt="I am sorry, your request looks wrong. Please check your URL or model name in the settings or frontmatter.",me="I am sorry, I could not answer your request because of an error, here is what went wrong:",De="chatFolder",rt="chatTemplateFolder",v=`

`,q=/---[\s\S]*?---/g,it=/\[\[([^\][]+)\]\]/g,ot=/\[([^\]]+)\]\(([^()]+)\)/g,st=`=begin-chatgpt-md-comment${v}`,nt="=end-chatgpt-md-comment",at=3,Fe=6,lt="Portugu\xEAs Brasileiro",ct=4,ge="YYYYMMDDhhmmss",pt="Failed to fetch",ke="__chatgpt_plugin",j=`<hr class="${ke}">`,x="role::",U="assistant",W="developer",dt="system",L="user",he=`---
system_commands: ['I am a helpful assistant.']
frequency_penalty: 0
max_tokens: 300
model: gpt-4.1-mini
presence_penalty: 0
stream: true
temperature: 1
aiService: openai
---`,z=6e3,Y=`You are an AI assistant integrated into Obsidian through the ChatGPT MD plugin. You are helping a user who is working within their Obsidian vault - a personal knowledge management system where they store notes, thoughts, and information in Markdown format.

Key context:
- The user is writing in Markdown format within Obsidian
- They may reference other notes in their vault using [[wiki links]] or standard [markdown links](url)
- Your responses will be inserted directly into their Markdown document
- Be concise but helpful, and format your responses appropriately for Markdown
- If you provide code examples, use proper markdown code blocks with language specification
- When suggesting organizational strategies, consider that this is within a personal knowledge management context
- The user may be taking notes, brainstorming, writing, researching, or organizing information

Code block formatting requirements:
- Code blocks must start and end with exactly 3 backticks (\`\`\`) on a new line
- There should be no whitespace before the opening or closing backticks
- The language name should be specified immediately after the opening backticks
- The actual code should start on a new line after the language specification
- Example format:
\`\`\`javascript
console.log("Hello World");
\`\`\`

Inline code formatting requirements:
- Use single backticks (\`) for inline code references like filenames (e.g., \`example.md\`), variable names (e.g., \`myVariable\`), or short code snippets referenced within a paragraph.
- Always ensure that single backticks are properly closed to avoid breaking Markdown rendering. For example, use \`code\` not \`code.

Table formatting requirements:
- Use standard Markdown table syntax.
- Tables should NOT be wrapped in code blocks.

Respond naturally and helpfully while being mindful of this Obsidian/note-taking context.`;var mt=c=>{let e=(c.match(/```/g)||[]).length%2!==0;return e&&console.log("[ChatGPT MD] Unclosed code block detected"),e};var Ot=c=>{let t=c.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&").replace("YYYY","\\d{4}").replace("MM","\\d{2}").replace("DD","\\d{2}").replace("hh","\\d{2}").replace("mm","\\d{2}").replace("ss","\\d{2}");return new RegExp(`^${t}$`)},gt=(c="",t)=>(c==null?void 0:c.length)==t.length&&Ot(t).test(c),V=c=>c===0?"":c>Fe?"#".repeat(Fe)+" ":"#".repeat(c)+" ",ne=(c,t,e)=>`${v}${j}${v}${c}${x}${t}${e?`<span style="font-size: small;"> (${e})</span>`:""}${v}`,ue=c=>{let e=c.replace(/^---\n/,"").replace(/\n---$/,"").split(`
`),r={},i=null,s=[];for(let o=0;o<e.length;o++){let n=e[o].trim();if(!n)continue;if(i!==null)if(n.startsWith("-")){let m=n.substring(1).trim();(m.startsWith("'")&&m.endsWith("'")||m.startsWith('"')&&m.endsWith('"'))&&(m=m.substring(1,m.length-1)),s.push(m);continue}else r[i]=s,i=null,s=[];let a=n.indexOf(":");if(a===-1)continue;let l=n.substring(0,a).trim(),p=n.substring(a+1).trim();if(p===""&&o+1<e.length&&e[o+1].trim().startsWith("-")){i=l,s=[];continue}p.startsWith("[")&&p.endsWith("]")?r[l]=p.slice(1,-1).split(",").map(m=>{let d=m.trim();return d.startsWith("'")&&d.endsWith("'")||d.startsWith('"')&&d.endsWith('"')?d.slice(1,-1):d}):p==="true"?r[l]=!0:p==="false"?r[l]=!1:p==="null"?r[l]=null:isNaN(Number(p))?r[l]=p:r[l]=Number(p)}return i!==null&&(r[i]=s),r};var J=class{addHorizontalRule(t,e,r){let i=`${v}<hr class="${ke}">${v}${V(r)}${x}${e}${v}`,s=t.getCursor();t.replaceRange(i,s),t.setCursor(s.line+i.split(`
`).length-1,0)}appendMessage(t,e,r){let i=V(r),s=ne(i,U),o=ne(i,L);t.replaceRange(`${s}${e}${o}`,t.getCursor())}clearChat(t){let r=t.getValue().match(q);if(r!=null&&r.length){let[i]=r;t.setValue(i),t.setCursor({line:t.lastLine()+1,ch:0})}else t.setValue("")}moveCursorToEnd(t){try{let r={line:t.lastLine()+1,ch:0};t.setCursor(r)}catch(e){throw new Error("Error moving cursor to end of file"+e)}}addCommentBlock(t,e,r){let i=t.getCursor(),s=`${e}${v}${r}`;t.replaceRange(s,i),t.setCursor({line:i.line+1,ch:i.ch})}};var Q=class{constructor(t,e){this.fileService=t;this.notificationService=e}findLinksInMessage(t){let e=[{regex:it,fullMatchIndex:0,titleIndex:1},{regex:ot,fullMatchIndex:0,titleIndex:2}],r=[],i=new Set;for(let{regex:s,fullMatchIndex:o,titleIndex:n}of e)for(let a of t.matchAll(s)){let l=a[o],p=a[n];p&&!i.has(p)&&!p.startsWith("http://")&&!p.startsWith("https://")&&(r.push({link:l,title:p}),i.add(p))}return r}splitMessages(t){return t?t.split(j):[]}removeYAMLFrontMatter(t){return t&&t.replace(q,"").trim()}removeCommentsFromMessages(t){try{let e=/=begin-chatgpt-md-comment[\s\S]*?=end-chatgpt-md-comment/g;return t.replace(e,"")}catch(e){return this.notificationService.showError("Error removing comments from messages: "+e),t}}extractRoleAndMessage(t){try{if(!t.includes(x))return{role:L,content:t};let[e,...r]=t.split(x)[1].split(`
`);return{role:this.cleanupRole(e),content:r.join(`
`).trim()}}catch(e){return this.notificationService.showError("Failed to extract role and message: "+e),{role:L,content:t}}}cleanupRole(t){let e=t.trim().toLowerCase(),i=[L,U].find(s=>e.includes(s));return i||(this.notificationService.showWarning(`Unknown role: "${t}", defaulting to user`),L)}cleanMessagesFromNote(t){return this.splitMessages(this.removeYAMLFrontMatter(t.getValue())).map(r=>this.removeCommentsFromMessages(r))}async getMessagesFromEditor(t,e){let r=this.cleanMessagesFromNote(t);r=await Promise.all(r.map(async s=>{let o=this.findLinksInMessage(s);for(let n of o)try{let a=await this.fileService.getLinkedNoteContent(n.title);if(a){let l=new RegExp(`${v}${j}${v}#+ ${x}(?:${L}|${U}).*$`,"gm");a=a==null?void 0:a.replace(l,"").replace(q,""),s=s.replace(new RegExp(this.escapeRegExp(n.link),"g"),`${v}${n.title}${v}${a}${v}`)}else console.warn(`Error fetching linked note content for: ${n.link}`)}catch(a){console.error(a)}return s}));let i=r.map(s=>this.extractRoleAndMessage(s));return{messages:r,messagesWithRole:i}}addSystemCommandsToMessages(t,e){return!e||e.length===0?t:[...e.map(i=>({role:"system",content:i})),...t]}getHeaderRole(t,e,r){return`${v}${j}${v}${t}${x}${e}${r?`<span style="font-size: small;"> (${r})</span>`:""}${v}`}unfinishedCodeBlock(t){let e=t.match(/```/g);return e!==null&&e.length%2!==0}formatMessage(t,e,r){let i=V(e);return`${this.getHeaderRole(i,t.role,r)}${t.content}`}appendMessage(t,e,r){let i=V(r),s=this.getHeaderRole(i,U),o=this.getHeaderRole(i,L);t.replaceRange(`${s}${e}${o}`,t.getCursor())}processResponse(t,e,r){e.mode==="streaming"?e.wasAborted||this.processStreamingResponse(t,r):this.processStandardResponse(t,e,r)}processStreamingResponse(t,e){let r=V(e.headingLevel),i=this.getHeaderRole(r,L);t.replaceRange(i,t.getCursor());let s=t.getCursor(),o={line:s.line,ch:s.ch+i.length};t.setCursor(o)}processStandardResponse(t,e,r){let i=typeof e=="object"&&e.fullString||e,s=typeof e=="object"?e.model:void 0,o=this.unfinishedCodeBlock(i)?i+"\n```":i,n=V(r.headingLevel),a=this.getHeaderRole(n,U,s),l=this.getHeaderRole(n,L);t.replaceRange(`${a}${o}${l}`,t.getCursor())}escapeRegExp(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}};var H=require("obsidian");var B=require("obsidian"),fe=class extends B.SuggestModal{constructor(t,e,r){super(t),this.settings=e,this.titleDate=r}getFilesInChatFolder(){let t=this.app.vault.getAbstractFileByPath(this.settings.chatTemplateFolder);if(t!=null)return t.children;throw new B.Notice(`Error getting folder: ${this.settings.chatTemplateFolder}`),new Error(`Error getting folder: ${this.settings.chatTemplateFolder}`)}getSuggestions(t){let e=this.getFilesInChatFolder();return t==""?e.map(r=>({title:r.basename,file:r})).sort((r,i)=>r.title.localeCompare(i.title)):e.filter(r=>r.basename.toLowerCase().includes(t.toLowerCase())).map(r=>({title:r.basename,file:r})).sort((r,i)=>r.title.localeCompare(i.title))}renderSuggestion(t,e){e.createEl("div",{text:t.title})}async onChooseSuggestion(t,e){new B.Notice(`Selected ${t.title}`);let r=await this.app.vault.read(t.file),i=r;!/^---\n[\s\S]*?\n---/.test(r)&&this.settings.defaultChatFrontmatter&&(i=this.settings.defaultChatFrontmatter+`

`+r);let o=`${this.titleDate} ${t.title}`,n=(0,B.normalizePath)(`${this.settings.chatFolder}/${o}.md`),a=1;for(;await this.app.vault.adapter.exists(n);)n=(0,B.normalizePath)(`${this.settings.chatFolder}/${o} (${a}).md`),a++;try{let l=await this.app.vault.create(n,i);await this.app.workspace.openLinkText(l.basename,"",!0)}catch(l){console.error(l)}}};var X=class{constructor(t,e,r){this.app=t;this.fileService=e;this.editorContentService=r}async createNewChatFromTemplate(t,e){try{if(!t.chatFolder||t.chatFolder.trim()===""){new H.Notice("[ChatGPT MD] No chat folder value found. Please set one in settings.");return}if(!t.chatTemplateFolder||t.chatTemplateFolder.trim()===""){new H.Notice("[ChatGPT MD] No chat template folder value found. Please set one in settings.");return}if(!await this.fileService.ensureFolderExists(t.chatFolder,De)||!await this.fileService.ensureFolderExists(t.chatTemplateFolder,rt))return;new fe(this.app,t,e).open()}catch(r){console.error("[ChatGPT MD] Error in Create new chat from template",r),new H.Notice("[ChatGPT MD] Error in Create new chat from template, check console")}}async createNewChatWithHighlightedText(t,e){try{let r=t.getSelection();if(!e.chatFolder||e.chatFolder.trim()===""){new H.Notice("[ChatGPT MD] No chat folder value found. Please set one in settings.");return}if(!await this.fileService.ensureFolderExists(e.chatFolder,De))return;let s=`${this.fileService.formatDate(new Date,e.dateFormat)}.md`,o=`${e.chatFolder}/${s}`,n="";e.defaultChatFrontmatter&&(n=e.defaultChatFrontmatter+`

`),r&&(n+=r);let a=await this.fileService.createNewFile(o,n);await this.app.workspace.openLinkText(a.basename,"",!0,{state:{mode:"source"}});let l=this.app.workspace.getActiveViewOfType(H.MarkdownView);if(!l){new H.Notice("No active markdown editor found.");return}l.editor.focus(),this.editorContentService.moveCursorToEnd(l.editor)}catch(r){console.error("[ChatGPT MD] Error in Create new chat with highlighted text",r),new H.Notice("[ChatGPT MD] Error in Create new chat with highlighted text, check console")}}};var $e=require("obsidian");var ht=require("obsidian"),P=class{showNotification(t,e=5e3){new ht.Notice(t,e)}formatChatMessage(t,e=!1){return e?`I am sorry. ${t}`:t}showSuccess(t){this.showNotification(`\u2705 ${t}`,3e3)}showWarning(t){this.showNotification(`\u26A0\uFE0F ${t}`,5e3)}showError(t){this.showNotification(`\u274C ${t}`,7e3)}};function D(c){return!!c&&c.trim()!==""}var A=class{constructor(t){this.notificationService=t||new P}getApiKey(t,e){switch(e){case u:return t.apiKey;case g:return t.openrouterApiKey;case S:return"";case y:return"";case f:return t.groqApiKey;default:return""}}validateApiKey(t,e){if(!(e===S||e===y)&&!D(t)){let r=`${e} API key is missing or invalid. Please add your ${e} API key in the settings.`;throw this.notificationService.showError(r),new Error(r)}}createAuthHeaders(t,e){let r={"Content-Type":"application/json"};switch(e){case u:r.Authorization=`Bearer ${t}`;break;case g:r.Authorization=`Bearer ${t}`,r["HTTP-Referer"]="https://github.com/bramses/chatgpt-md",r["X-Title"]="Obsidian ChatGPT MD Plugin";break;case S:break;case y:break;case f:r.Authorization=`Bearer ${t}`;break}return r}};var M=class{constructor(t){this.collectedCitations=new Set;this.tableBuffer="";this.isInTable=!1;this.tableStartPosition=null;this.notificationService=t||new P}insertAssistantHeader(t,e,r){let i=ne(e,U,r),s={line:t.getCursor().line,ch:t.getCursor().ch};t.replaceRange(i,s);let o={line:s.line,ch:s.ch+i.length};return t.setCursor(o),{initialCursor:s,newCursor:o}}parseNonStreamingResponse(t,e){var r,i,s;switch(e){case u:return t.choices[0].message.content;case g:return t.choices[0].message.content;case y:return t.choices[0].message.content;case S:return t.message&&t.message.content?t.message.content:t.response?t.response:JSON.stringify(t);case f:return t.choices[0].message.content;default:return console.warn(`Unknown service type: ${e}`),((s=(i=(r=t==null?void 0:t.choices)==null?void 0:r[0])==null?void 0:i.message)==null?void 0:s.content)||(t==null?void 0:t.response)||JSON.stringify(t)}}processStreamLine(t,e,r,i,s,o){switch(s){case u:case g:case y:case f:return this.processOpenAIFormat(t,e,r,i,o);case S:return this.processOllamaFormat(t,e,r,i,o);default:return console.warn(`Unknown service type for streaming: ${s}`),e}}processOpenAIFormat(t,e,r,i,s){if(t.trim()==="")return e;try{let o=t.substring(5).trimStart(),n=JSON.parse(o);if(n.citations&&n.citations.length>0)for(let a of n.citations)this.collectedCitations.add(a);if(n.choices&&n.choices[0]){let{delta:a}=n.choices[0];if(a&&a.content)return this.processContentWithTableBuffering(a.content,e,r,s)}return e}catch(o){return e}}processOllamaFormat(t,e,r,i,s){if(t.trim()==="")return e;try{let o=JSON.parse(t);if(o.message&&o.message.content){let n=o.message.content;return this.processContentWithTableBuffering(n,e,r,s)}return o.response?this.processContentWithTableBuffering(o.response,e,r,s):e}catch(o){return e}}async processStreamResponse(t,e,r,i,s,o){let n=t.body.getReader(),a=new TextDecoder,l=!1,p="",m=!1;try{for(;!l;){let{value:d,done:I}=await n.read();if(l=I,l)break;let G=a.decode(d).split(`
`);for(let O of G)O.startsWith("data: [DONE]")||(O.startsWith("data:")?p=this.processStreamLine(O,p,r,i.newCursor,e,s):O.trim()!==""&&(p=this.processStreamLine(O,p,r,i.newCursor,e,s)))}}catch(d){}if(o&&o.wasAborted())return m=!0,o.resetAbortedFlag(),this.resetTableState(),s||r.replaceRange("",i.initialCursor,r.getCursor()),{text:"",wasAborted:m};if(this.isInTable&&this.tableBuffer){if(this.tableStartPosition&&!s){let d=r.getCursor();r.replaceRange(this.tableBuffer,this.tableStartPosition,d),r.setCursor({line:this.tableStartPosition.line,ch:this.tableStartPosition.ch+this.tableBuffer.length})}else s&&r.replaceSelection(this.tableBuffer);p+=this.tableBuffer,this.resetTableState()}if(mt(p)){let d=r.getCursor();r.replaceRange("\n```",d),p+="\n```"}if(this.collectedCitations.size>0){let I=`

**Sources:**
`+Array.from(this.collectedCitations).map((G,O)=>`${O+1}. [${G}](${G})`).join(`
`),_=r.getCursor();r.replaceRange(I,_),r.setCursor({line:_.line,ch:_.ch+I.length}),p+=I,this.collectedCitations.clear()}if(!s){let d=r.getCursor();r.replaceRange("",d,{line:1/0,ch:1/0})}return{text:p,wasAborted:m}}isTableRow(t){let e=t.trim();if(!e.includes("|")||e.length<3||this.isTableSeparator(e))return!1;let r=e.split("|");return r.length>=2&&r.some(i=>i.trim().length>0)}isTableSeparator(t){let e=t.trim();return!e.includes("|")||!e.includes("-")?!1:/^[\|\-\:\s]+$/.test(e)}isTableEnd(t,e){let i=(t+e).split(`
`).filter(s=>s.trim()!=="").pop()||"";return this.isInTable&&!this.isTableRow(i)&&!this.isTableSeparator(i)}isCompleteTable(t){let e=t.split(`
`).filter(o=>o.trim()!=="");if(e.length<2)return!1;let r=!1,i=!1,s=!1;for(let o of e)this.isTableRow(o)?i?s=!0:r=!0:this.isTableSeparator(o)&&(i=!0);return r&&i&&s}resetTableState(){this.isInTable=!1,this.tableBuffer="",this.tableStartPosition=null}processContentWithTableBuffering(t,e,r,i){if(!this.isInTable&&t.includes("|")&&(e.slice(-200)+t).split(`
`).some(l=>{let p=l.trim();return p.includes("|")&&(this.isTableRow(p)||this.isTableSeparator(p))}))return this.isInTable=!0,this.tableBuffer=t,this.tableStartPosition=r.getCursor(),e+t;if(this.isInTable){if(this.tableBuffer+=t,this.shouldFlushTable(this.tableBuffer,t)){let{tableContent:o,remainingContent:n}=this.extractTableFromBuffer(this.tableBuffer);if(this.tableStartPosition&&!i){let a=r.getCursor();r.replaceRange(o,this.tableStartPosition,a),r.setCursor({line:this.tableStartPosition.line,ch:this.tableStartPosition.ch+o.length})}else i&&r.replaceSelection(o);if(this.resetTableState(),n){if(i)r.replaceSelection(n);else{let a=r.getCursor();r.replaceRange(n,a),r.setCursor({line:a.line,ch:a.ch+n.length})}return e+o+n}return e+o}return e+t}if(i)r.replaceSelection(t);else{let s=r.getCursor();r.replaceRange(t,s),r.setCursor({line:s.line,ch:s.ch+t.length})}return e+t}shouldFlushTable(t,e){let r=t.split(`
`);return!!(t.includes(`

`)||this.isCompleteTable(t)&&e.includes(`
`)&&r.slice(-3).filter(a=>a.trim()!=="").some(a=>{let l=a.trim();return l!==""&&!this.isTableRow(l)&&!this.isTableSeparator(l)})||t.length>2e3)}extractTableFromBuffer(t){let r=this.reconstructTableLines(t).split(`
`),i=[],s=[],o=!1;for(let l=0;l<r.length;l++){let p=r[l],m=p.trim();if(!o)if(m===""||this.isTableRow(m)||this.isTableSeparator(m))i.push(p);else{o=!0,s=r.slice(l);break}}let n=i.join(`
`);n&&!n.endsWith(`
`)&&(n+=`
`);let a=s.join(`
`);return{tableContent:n,remainingContent:a}}reconstructTableLines(t){let e=t;return e=e.replace(/\|\|/g,`|
|`),e=e.replace(/\n\n+/g,`
`),e}};var T=class{constructor(t){this.notificationService=t}handleApiError(t,e,r={showNotification:!0,logToConsole:!0,returnForChat:!1}){var m,d,I,_;let i=`[ChatGPT MD] ${e}`,s="unknown_error",o="",n="",a=((m=r.context)==null?void 0:m.model)||"",l=((d=r.context)==null?void 0:d.url)||"",p=this.formatContextInfo(a,l);if(t instanceof Object?t.name==="AbortError"?(s="stream_aborted",o=`${i}: Stream aborted`,n="Stream aborted"):t.message===pt?(s="network_error",o=`${i}: Network connection error`,n=et):t.status===401||((I=t.error)==null?void 0:I.status)===401?(s="authentication_error",o=`${i}: Authentication failed (401)`,n=Ze):t.status===404||((_=t.error)==null?void 0:_.status)===404?(s="not_found_error",o=`${i}: Resource not found (404)${p?` - ${p}`:""}`,n=`${tt}${p?`${v}${p}`:""}`):t.error?(s="api_error",o=`${i}: ${t.error.message}${p?` - ${p}`:""}`,n=`${me}${v}${t.error.message}${p?`${v}${p}`:""}`):(o=`${i}: ${JSON.stringify(t)}${p?` - ${p}`:""}`,n=`${me}${v}${JSON.stringify(t)}${p?`${v}${p}`:""}`):(o=`${i}: ${t}${p?` - ${p}`:""}`,n=`${me}${v}${t}${p?`${v}${p}`:""}`),r.logToConsole&&console.error(o,t,r.context),r.showNotification&&this.notificationService.showNotification(o,5e3),r.returnForChat)return`I am sorry, I could not answer your request because of an error, here is what went wrong-

${t instanceof Object&&t.error?t.error.message:(t==null?void 0:t.message)||t||"undefined"}

Model- ${a}, URL- ${l}`;throw new Error(o)}formatContextInfo(t,e){let r=[];return t&&r.push(`Model: ${t}`),e&&r.push(`URL: ${e}`),r.length>0?r.join(", "):""}handleUrlError(t,e,r){let i=`[ChatGPT MD] Error calling specified URL: ${t}`;return this.notificationService.showNotification(i),console.error(i,{url:t,defaultUrl:e,serviceName:r}),`I am sorry, I could not answer your request because of an error, here is what went wrong-

Error connecting to the custom URL.

Model- ${r===S?"llama2":"unknown"}, URL- ${t}`}handleModelError(t,e){let r=`[ChatGPT MD] Error calling model: ${t}`;return this.notificationService.showNotification(r),console.error(r,{model:t,serviceName:e}),`I am sorry, there was an error with the model: ${t}. Please check your settings or try a different model.`}handleValidationError(t,e){let r=`[ChatGPT MD] Validation Error: ${t}`;throw this.notificationService.showNotification(r),console.error(r,e),new Error(r)}};var E=class{constructor(t,e,r,i){this.abortController=null;this.wasStreamingAborted=!1;this.notificationService=e||new P,this.errorService=t||new T(this.notificationService),this.apiAuthService=r||new A,this.apiResponseParser=i||new M}async makeStreamingRequest(t,e,r,i){try{console.log(`[ChatGPT MD] Making streaming request to ${i}`,e),this.abortController=new AbortController;let s=await fetch(t,{method:"POST",headers:r,body:JSON.stringify(e),signal:this.abortController.signal});if(!s.ok)throw await this.handleHttpError(s,i,e,t);if(!s.body)throw new Error("The response body was empty");return s}catch(s){return this.handleRequestError(s,i,e,t)}}async makeNonStreamingRequest(t,e,r,i){try{console.log(`[ChatGPT MD] Making non-streaming request to ${i}`,e);let o=(await(0,$e.requestUrl)({url:t,method:"POST",headers:r,contentType:"application/json",body:JSON.stringify(e),throw:!1})).json;return o!=null&&o.error?this.errorService.handleApiError({error:o.error},i,{returnForChat:!0,showNotification:!0,context:{model:e.model,url:t}}):this.apiResponseParser.parseNonStreamingResponse(o,i)}catch(s){return this.errorService.handleApiError(s,i,{returnForChat:!0,showNotification:!0,context:{model:e.model,url:t}})}}async makeGetRequest(t,e,r){try{console.log(`[ChatGPT MD] Making GET request to ${r}`);let i=await(0,$e.requestUrl)({url:t,method:"GET",headers:e,throw:!1});if(i.status!==200)throw new Error(`Failed to fetch data from ${t}: ${i.status}`);return i.json}catch(i){throw console.error(`Error making GET request to ${r}:`,i),i}}async handleHttpError(t,e,r,i){let s;try{s=await t.json()}catch(n){s={status:t.status,statusText:t.statusText}}let o=this.errorService.handleApiError(s,e,{returnForChat:!1,showNotification:!0,context:{model:r.model,url:i,status:t.status}});return new Error(o)}handleRequestError(t,e,r,i){return this.errorService.handleApiError(t,e,{returnForChat:!1,showNotification:!0,context:{model:r.model,url:i}})}stopStreaming(){this.abortController&&(this.wasStreamingAborted=!0,this.abortController.abort(),this.abortController=null)}wasAborted(){return this.wasStreamingAborted}resetAbortedFlag(){this.wasStreamingAborted=!1}};var $=class{constructor(t,e){this.inferTitleFromMessages=async(t,e,r)=>{try{if(e.length<2)return this.notificationService.showWarning("Not enough messages to infer title. Minimum 2 messages."),"";let i=`Infer title from the summary of the content of these messages. The title **cannot** contain any of the following characters: colon (:), back slash (\\), forward slash (/), asterisk (*), question mark (?), double quote ("), less than (<), greater than (>), or pipe (|) as these are invalid in file names. Just return the title. Write the title in ${r.inferTitleLanguage}. 
Messages:${v}${JSON.stringify(e)}`,s=this.getDefaultConfig(),o={...s,...r};o.model||(console.log("[ChatGPT MD] Model not set for title inference, using default model"),o.model=s.model),o.url||(console.log("[ChatGPT MD] URL not set for title inference, using default URL"),o.url=s.url),console.log("[ChatGPT MD] Inferring title with model:",o.model);try{return await this.callNonStreamingAPIForTitleInference(t,[{role:L,content:i}],o)}catch(n){return console.error("[ChatGPT MD] Error calling API for title inference:",n),""}}catch(i){return console.error("[ChatGPT MD] Error inferring title:",i),this.showNoTitleInferredNotification(),""}};this.notificationService=e!=null?e:new P,this.errorService=t!=null?t:new T(this.notificationService),this.apiService=new E(this.errorService,this.notificationService),this.apiAuthService=new A(this.notificationService),this.apiResponseParser=new M(this.notificationService)}async callAIAPI(t,e={},r,i,s,o,n,a){let l={...this.getDefaultConfig(),...e};return a&&(l.url=i),e.stream&&s?this.callStreamingAPI(n,t,l,s,r,o):this.callNonStreamingAPI(n,t,l)}async inferTitle(t,e,r,i){try{if(!t.file)throw new Error("No active file found");let s=this.getApiKeyFromSettings(e),o=await this.inferTitleFromMessages(s,r,e),n="";return typeof o=="string"?n=o:o&&typeof o=="object"&&(n=o.fullString||""),n&&n.trim().length>0?(await i.writeInferredTitle(t,n.trim()),n.trim()):(this.showNoTitleInferredNotification(),"")}catch(s){return console.error("[ChatGPT MD] Error in inferTitle:",s),this.showNoTitleInferredNotification(),""}}showNoTitleInferredNotification(){var t;(t=this.notificationService)==null||t.showWarning("Could not infer title. The file name was not changed.")}async callNonStreamingAPIForTitleInference(t,e,r){try{r.stream=!1;let{payload:i,headers:s}=this.prepareApiCall(t,e,r,!0);return await this.apiService.makeNonStreamingRequest(this.getApiEndpoint(r),i,s,this.serviceType)}catch(i){throw i}}stopStreaming(){var t;(t=this.apiService)==null||t.stopStreaming()}processStreamingResult(t){return t.wasAborted&&t.text===""?{fullString:"",mode:"streaming",wasAborted:!0}:{fullString:t.text,mode:"streaming",wasAborted:t.wasAborted}}getApiEndpoint(t){return`${t.url}${Be[this.serviceType]}`}addPluginSystemMessage(t){return[{role:dt,content:Y},...t]}prepareApiCall(t,e,r,i=!1){this.apiAuthService.validateApiKey(t,this.serviceType);let s=i?e:this.addPluginSystemMessage(e),o=this.createPayload(r,s),n=this.apiAuthService.createAuthHeaders(t,this.serviceType);return{payload:o,headers:n}}handleApiCallError(t,e,r=!1){if(console.error(`[ChatGPT MD] ${this.serviceType} API error:`,t),!!r)throw t;return this.errorService.handleApiError(t,this.serviceType,{returnForChat:!0,showNotification:!0,context:{model:e.model,url:e.url}})}},ut=(c,t)=>{if(t!=null&&t.includes(g))return g;if(t!=null&&t.startsWith("lmstudio@"))return y;if(t!=null&&t.includes("local"))return c!=null&&c.includes("1234")?y:S;if(t!=null&&t.includes("llama3")||t!=null&&t.includes("mixtral")||t!=null&&t.includes("gemma"))return f;let e="openrouter",r=["localhost","127.0.0.1"],i="1234",s="api.groq.com";if(c!=null&&c.includes(e))return g;if(c!=null&&c.includes(i))return y;if(c!=null&&c.includes(s))return f;if(r.some(o=>c==null?void 0:c.includes(o)))return S},ft=c=>{let t=D(c.openrouterApiKey),e=D(c.apiKey),r=D(c.groqApiKey);return e&&t&&r?u:e&&t?u:e&&r?u:t&&r?g:t?g:e?u:r?f:null};var C={aiService:u,frequency_penalty:0,max_tokens:300,model:"gpt-4",presence_penalty:0,stream:!0,system_commands:null,tags:[],temperature:1,title:"Untitled",top_p:1,url:"https://api.openai.com"},St=async(c,t)=>{try{let e=new A;if(!D(t))return console.error("OpenAI API key is missing. Please add your OpenAI API key in the settings."),[];let r=new E,i=e.createAuthHeaders(t,u);return(await r.makeGetRequest(`${c}/v1/models`,i,u)).data.filter(o=>(o.id.includes("o3")||o.id.includes("o4")||o.id.includes("o1")||o.id.includes("gpt-4")||o.id.includes("gpt-3"))&&!o.id.includes("audio")&&!o.id.includes("transcribe")&&!o.id.includes("realtime")&&!o.id.includes("o1-pro")&&!o.id.includes("tts")).sort((o,n)=>o.id<n.id?1:o.id>n.id?-1:0).map(o=>o.id)}catch(e){return console.error("Error fetching models:",e),[]}},Se=class extends ${constructor(e,r,i,s,o){super(e,r);this.serviceType=u;this.errorService=e||new T(this.notificationService),this.apiService=i||new E(this.errorService,this.notificationService),this.apiAuthService=s||new A(this.notificationService),this.apiResponseParser=o||new M(this.notificationService)}getDefaultConfig(){return C}getApiKeyFromSettings(e){return this.apiAuthService.getApiKey(e,u)}createPayload(e,r){let i=e.model.includes("@")?e.model.split("@")[1]:e.model,s=r;if(e.system_commands&&e.system_commands.length>0){let n=e.system_commands.map(a=>({role:W,content:a}));s=[...n,...r],console.log(`[ChatGPT MD] Added ${n.length} developer commands to messages`)}let o={model:i,messages:s,max_completion_tokens:e.max_tokens,stream:e.stream};return i.includes("search")||(o.temperature=e.temperature,o.top_p=e.top_p,o.presence_penalty=e.presence_penalty,o.frequency_penalty=e.frequency_penalty),o}handleAPIError(e,r,i){let s={model:r.model,url:r.url,defaultUrl:C.url,aiService:u};return e instanceof Object&&r.url!==C.url?this.errorService.handleUrlError(r.url,C.url,u):this.errorService.handleApiError(e,u,{context:s,showNotification:!0,logToConsole:!0})}async callStreamingAPI(e,r,i,s,o,n){try{let{payload:a,headers:l}=this.prepareApiCall(e,r,i),p=this.apiResponseParser.insertAssistantHeader(s,o,a.model),m=await this.apiService.makeStreamingRequest(this.getApiEndpoint(i),a,l,this.serviceType),d=await this.apiResponseParser.processStreamResponse(m,this.serviceType,s,p,n,this.apiService);return this.processStreamingResult(d)}catch(a){return{fullString:`Error: ${a}`,mode:"streaming"}}}async callNonStreamingAPI(e,r,i){var s;try{console.log('[ChatGPT MD] "no stream"',i),i.stream=!1;let{payload:o,headers:n}=this.prepareApiCall(e,r,i);return{fullString:await this.apiService.makeNonStreamingRequest(this.getApiEndpoint(i),o,n,this.serviceType),model:o.model}}catch(o){let n=r.length===1&&((s=r[0].content)==null?void 0:s.toString().includes("Infer title from the summary"));return this.handleApiCallError(o,i,n)}}showNoTitleInferredNotification(){this.notificationService.showWarning("Could not infer title. The file name was not changed.")}addPluginSystemMessage(e){return[{role:W,content:Y},...e]}};var N={aiService:S,model:"llama2",url:"http://localhost:11434",stream:!0,title:"Untitled",system_commands:null},vt=async c=>{try{let t=new E,e={"Content-Type":"application/json"};return(await t.makeGetRequest(`${c}/api/tags`,e,S)).models.sort((s,o)=>s.name<o.name?1:s.name>o.name?-1:0).map(s=>`local@${s.name}`)}catch(t){return console.error("Error fetching models:",t),[]}},ve=class extends ${constructor(e,r,i,s,o){super(e,r);this.serviceType=S;this.errorService=e||new T(this.notificationService),this.apiService=i||new E(this.errorService,this.notificationService),this.apiAuthService=s||new A(this.notificationService),this.apiResponseParser=o||new M(this.notificationService)}getDefaultConfig(){return N}getApiKeyFromSettings(e){return this.apiAuthService.getApiKey(e,S)}createPayload(e,r){let i=e.model.includes("@")?e.model.split("@")[1]:e.model,s=r;if(e.system_commands&&e.system_commands.length>0){let o=e.system_commands.map(n=>({role:"system",content:n}));s=[...o,...r],console.log(`[ChatGPT MD] Added ${o.length} system commands to messages`)}return{model:i,messages:s,stream:e.stream}}handleAPIError(e,r,i){let s={model:r.model,url:r.url,defaultUrl:N.url,aiService:S};return e instanceof Object&&r.url!==N.url?this.errorService.handleUrlError(r.url,N.url,S):this.errorService.handleApiError(e,S,{context:s,showNotification:!0,logToConsole:!0})}async callStreamingAPI(e,r,i,s,o,n){try{let{payload:a,headers:l}=this.prepareApiCall(e,r,i),p=this.apiResponseParser.insertAssistantHeader(s,o,a.model),m=await this.apiService.makeStreamingRequest(this.getApiEndpoint(i),a,l,this.serviceType),d=await this.apiResponseParser.processStreamResponse(m,this.serviceType,s,p,n,this.apiService);return this.processStreamingResult(d)}catch(a){return console.error("[ChatGPT MD] Ollama streaming error:",a),{fullString:`Error: ${a}`,mode:"streaming"}}}async callNonStreamingAPI(e,r,i){var s;try{console.log('[ChatGPT MD] "no stream"',i),i.stream=!1;let{payload:o,headers:n}=this.prepareApiCall(e,r,i);return{fullString:await this.apiService.makeNonStreamingRequest(this.getApiEndpoint(i),o,n,this.serviceType),model:o.model}}catch(o){let n=r.length===1&&((s=r[0].content)==null?void 0:s.toString().includes("Infer title from the summary"));return this.handleApiCallError(o,i,n)}}showNoTitleInferredNotification(){this.notificationService.showWarning("Could not infer title. The file name was not changed.")}};var R={aiService:g,frequency_penalty:.5,max_tokens:300,model:"anthropic/claude-3-opus:beta",openrouterApiKey:"",presence_penalty:.5,stream:!0,system_commands:null,tags:[],temperature:.3,title:"Untitled",top_p:1,url:"https://openrouter.ai"},yt=async(c,t)=>{try{let e=new A;if(!D(t))return console.error("OpenRouter API key is missing. Please add your OpenRouter API key in the settings."),[];let r=new E,i=e.createAuthHeaders(t,g);return(await r.makeGetRequest(`${c}/api/v1/models`,i,g)).data.sort((o,n)=>o.id<n.id?1:o.id>n.id?-1:0).map(o=>`${g}@${o.id}`)}catch(e){return console.error("Error fetching models:",e),[]}},ye=class extends ${constructor(e,r,i,s,o){super(e,r);this.serviceType=g;this.errorService=e||new T(this.notificationService),this.apiService=i||new E(this.errorService,this.notificationService),this.apiAuthService=s||new A(this.notificationService),this.apiResponseParser=o||new M(this.notificationService)}getDefaultConfig(){return R}getApiKeyFromSettings(e){return this.apiAuthService.getApiKey(e,g)}createPayload(e,r){let i=e.model.includes("@")?e.model.split("@")[1]:e.model,s=r;if(e.system_commands&&e.system_commands.length>0){let o=e.system_commands.map(n=>({role:"system",content:n}));s=[...o,...r],console.log(`[ChatGPT MD] Added ${o.length} system commands to messages`)}return{model:i,messages:s,max_tokens:e.max_tokens,temperature:e.temperature,top_p:e.top_p,presence_penalty:e.presence_penalty,frequency_penalty:e.frequency_penalty,stream:e.stream}}handleAPIError(e,r,i){let s={model:r.model,url:r.url,defaultUrl:R.url,aiService:g};return e instanceof Object&&r.url!==R.url?this.errorService.handleUrlError(r.url,R.url,g):this.errorService.handleApiError(e,g,{context:s,showNotification:!0,logToConsole:!0})}async callStreamingAPI(e,r,i,s,o,n){try{let{payload:a,headers:l}=this.prepareApiCall(e,r,i),p=this.apiResponseParser.insertAssistantHeader(s,o,a.model),m=await this.apiService.makeStreamingRequest(this.getApiEndpoint(i),a,l,this.serviceType),d=await this.apiResponseParser.processStreamResponse(m,this.serviceType,s,p,n,this.apiService);return this.processStreamingResult(d)}catch(a){return{fullString:`Error: ${a}`,mode:"streaming"}}}async callNonStreamingAPI(e,r,i){var s;try{console.log('[ChatGPT MD] "no stream"',i),i.stream=!1;let{payload:o,headers:n}=this.prepareApiCall(e,r,i);return{fullString:await this.apiService.makeNonStreamingRequest(this.getApiEndpoint(i),o,n,this.serviceType),model:o.model}}catch(o){let n=r.length===1&&((s=r[0].content)==null?void 0:s.toString().includes("Infer title from the summary"));return this.handleApiCallError(o,i,n)}}showNoTitleInferredNotification(){this.notificationService.showWarning("Could not infer title. The file name was not changed.")}};var w={aiService:y,frequency_penalty:0,max_tokens:300,model:"local-model",presence_penalty:0,stream:!0,system_commands:null,tags:[],temperature:1,title:"Untitled",top_p:1,url:"http://localhost:1234"},At=async(c,t)=>{try{let e=new A,r=t&&D(t)?e.createAuthHeaders(t,y):{"Content-Type":"application/json"};return(await new E().makeGetRequest(`${c}/v1/models`,r,y)).data.filter(o=>!o.id.includes("embedding")&&!o.id.includes("audio")&&!o.id.includes("transcribe")&&!o.id.includes("tts")).sort((o,n)=>o.id<n.id?1:o.id>n.id?-1:0).map(o=>`lmstudio@${o.id}`)}catch(e){return console.error("Error fetching LM Studio models:",e),[]}},Ae=class extends ${constructor(e,r,i,s,o){super(e,r);this.serviceType=y;this.errorService=e||new T(this.notificationService),this.apiService=i||new E(this.errorService,this.notificationService),this.apiAuthService=s||new A(this.notificationService),this.apiResponseParser=o||new M(this.notificationService)}getDefaultConfig(){return w}getApiKeyFromSettings(e){return""}createPayload(e,r){let i=e.model.includes("@")?e.model.split("@")[1]:e.model,s=r;if(e.system_commands&&e.system_commands.length>0){let n=e.system_commands.map(a=>({role:"system",content:a}));s=[...n,...r],console.log(`[ChatGPT MD] Added ${n.length} system commands to messages`)}return{model:i,messages:s,max_completion_tokens:e.max_tokens,stream:e.stream,temperature:e.temperature,top_p:e.top_p,presence_penalty:e.presence_penalty,frequency_penalty:e.frequency_penalty}}handleAPIError(e,r,i){let s={model:r.model,url:r.url,defaultUrl:w.url,aiService:y};return e instanceof Object&&r.url!==w.url?this.errorService.handleUrlError(r.url,w.url,y):this.errorService.handleApiError(e,y,{context:s,showNotification:!0,logToConsole:!0})}async callStreamingAPI(e,r,i,s,o,n){try{let{payload:a,headers:l}=this.prepareApiCall(e,r,i),p=this.apiResponseParser.insertAssistantHeader(s,o,a.model),m=await this.apiService.makeStreamingRequest(this.getApiEndpoint(i),a,l,this.serviceType),d=await this.apiResponseParser.processStreamResponse(m,this.serviceType,s,p,n,this.apiService);return this.processStreamingResult(d)}catch(a){return{fullString:`Error: ${a}`,mode:"streaming"}}}async callNonStreamingAPI(e,r,i){var s;try{console.log('[ChatGPT MD] "no stream"',i),i.stream=!1;let{payload:o,headers:n}=this.prepareApiCall(e,r,i);return{fullString:await this.apiService.makeNonStreamingRequest(this.getApiEndpoint(i),o,n,this.serviceType),model:o.model}}catch(o){let n=r.length===1&&((s=r[0].content)==null?void 0:s.toString().includes("Infer title from the summary"));return this.handleApiCallError(o,i,n)}}showNoTitleInferredNotification(){this.notificationService.showWarning("Could not infer title. The file name was not changed.")}};var Ee=require("obsidian"),h=class{static async logToFile(t,e,r){var i,s;try{let o;if(t.serviceLocator?o=t.serviceLocator.getSettingsService().getSettings():o=(i=t.settings)!=null?i:{},!o.enableDetailedLog){console.log("\u{1F4DD} Log detalhado desabilitado, pulando grava\xE7\xE3o:",e);return}let n=new Date().toISOString().split("T")[0],a=`chatbot-groq-${n}.md`,l=((s=o.detailedLogPath)==null?void 0:s.trim())||"ChatGPT_MD/logs",p=`${l}/${a}`,m=new Date().toISOString(),d=this.createDetailedLogEntry(m,e,r,o);console.log("\u{1F4DD} Tentando gravar log em:",p),await this.ensureFolderExists(t,l);let I=t.app.vault.getAbstractFileByPath(p),_="";I instanceof Ee.TFile?(_=await t.app.vault.read(I),_+=`

`+d,console.log("\u2705 Log detalhado adicionado ao arquivo existente")):(_=`# Chatbot Groq - Log Detalhado ${n}

> Log detalhado gerado automaticamente pelo plugin ChatGPT MD Groq
> 
> **Data:** ${n}
> **Vault:** ${t.app.vault.getName()}
> **Plugin Version:** ${t.manifest.version}

---

${d}`,console.log("\u2705 Arquivo de log detalhado criado com sucesso")),await t.app.vault.create(p,_),console.log("\u{1F4DD} Log detalhado gravado com sucesso:",e.substring(0,50)+"...")}catch(o){console.error("\u274C Erro ao gravar log detalhado:",o),console.error("\u{1F4DD} Mensagem que falhou:",e),console.error("\u{1F527} Plugin info:",{manifest:t.manifest,vaultName:t.app.vault.getName(),context:r}),await this.fallbackLog(t,e,r,o)}}static createDetailedLogEntry(t,e,r,i){let n=`## \u{1F4DD} ${new Date(t).toLocaleString("pt-BR",{timeZone:"America/Sao_Paulo",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"})}

**Mensagem:** ${e}

**Timestamp:** ${t}
**Opera\xE7\xE3o:** ${(r==null?void 0:r.operation)||"N/A"}
**ID da Mensagem:** ${(r==null?void 0:r.messageId)||"N/A"}`;if(r!=null&&r.apiService&&(n+=`
**Servi\xE7o de IA:** ${r.apiService}`),r!=null&&r.model&&(n+=`
**Modelo:** ${r.model}`),r!=null&&r.tokens&&(n+=`
**Tokens:** ${r.tokens}`),r!=null&&r.duration&&(n+=`
**Dura\xE7\xE3o:** ${r.duration}ms`),r!=null&&r.inputData&&(n+=`

### \u{1F4E5} Dados de Input
\`\`\`json
${JSON.stringify(r.inputData,null,2)}
\`\`\``),r!=null&&r.outputData&&(n+=`

### \u{1F4E4} Dados de Output
\`\`\`json
${JSON.stringify(r.outputData,null,2)}
\`\`\``),r!=null&&r.requestHeaders&&Object.keys(r.requestHeaders).length>0&&(n+=`

### \u{1F4E8} Headers da Requisi\xE7\xE3o
\`\`\`json
${JSON.stringify(r.requestHeaders,null,2)}
\`\`\``),r!=null&&r.responseHeaders&&Object.keys(r.responseHeaders).length>0&&(n+=`

### \u{1F4E9} Headers da Resposta
\`\`\`json
${JSON.stringify(r.responseHeaders,null,2)}
\`\`\``),r!=null&&r.requestBody&&(n+=`

### \u{1F4E4} Body da Requisi\xE7\xE3o
\`\`\`json
${JSON.stringify(r.requestBody,null,2)}
\`\`\``),r!=null&&r.responseBody&&(n+=`

### \u{1F4E5} Body da Resposta
\`\`\`json
${JSON.stringify(r.responseBody,null,2)}
\`\`\``),i&&(n+=`

### \u2699\uFE0F Configura\xE7\xF5es Relevantes
**Log Detalhado:** ${i.enableDetailedLog?"\u2705 Ativado":"\u274C Desativado"}
**Pasta de Log:** ${i.detailedLogPath||"ChatGPT_MD/logs (padr\xE3o)"}
**Stream:** ${i.stream?"\u2705 Ativado":"\u274C Desativado"}
**Gerar no Cursor:** ${i.generateAtCursor?"\u2705 Ativado":"\u274C Desativado"}
**Inferir T\xEDtulo:** ${i.autoInferTitle?"\u2705 Ativado":"\u274C Desativado"}`,i.groqUrl&&(n+=`
**URL Groq:** ${i.groqUrl}`),i.openaiUrl&&(n+=`
**URL OpenAI:** ${i.openaiUrl}`),i.openrouterUrl&&(n+=`
**URL OpenRouter:** ${i.openrouterUrl}`)),r!=null&&r.metadata&&Object.keys(r.metadata).length>0){n+=`

### \u{1F4CA} Metadados
`;for(let[a,l]of Object.entries(r.metadata))typeof l=="object"?n+=`**${a}:** \`\`\`json
${JSON.stringify(l,null,2)}
\`\`\`
`:n+=`**${a}:** ${l}
`}if(r!=null&&r.error&&(n+=`

### \u274C Erro Detalhado
**Tipo:** ${r.error.name||"Error"}
**Mensagem:** ${r.error.message||r.error}
**Stack:** \`\`\`
${r.error.stack||"N/A"}
\`\`\``),r!=null&&r.stackTrace&&(n+=`

### \u{1F50D} Stack Trace Personalizado
\`\`\`
${r.stackTrace}
\`\`\``),r!=null&&r.callStack&&r.callStack.length>0&&(n+=`

### \u{1F4DE} Call Stack
\`\`\`
${r.callStack.join(`
`)}
\`\`\``),r!=null&&r.performanceMetrics&&Object.keys(r.performanceMetrics).length>0){n+=`

### \u26A1 M\xE9tricas de Performance
`;for(let[a,l]of Object.entries(r.performanceMetrics))n+=`**${a}:** ${l}ms
`}if(r!=null&&r.environmentInfo&&Object.keys(r.environmentInfo).length>0){n+=`

### \u{1F30D} Informa\xE7\xF5es do Ambiente
`;for(let[a,l]of Object.entries(r.environmentInfo))typeof l=="object"?n+=`**${a}:** \`\`\`json
${JSON.stringify(l,null,2)}
\`\`\`
`:n+=`**${a}:** ${l}
`}if(r!=null&&r.userActions&&r.userActions.length>0&&(n+=`

### \u{1F464} A\xE7\xF5es do Usu\xE1rio
`,r.userActions.forEach((a,l)=>{n+=`${l+1}. ${a}
`})),r!=null&&r.systemState&&Object.keys(r.systemState).length>0){n+=`

### \u{1F527} Estado do Sistema
`;for(let[a,l]of Object.entries(r.systemState))typeof l=="object"?n+=`**${a}:** \`\`\`json
${JSON.stringify(l,null,2)}
\`\`\`
`:n+=`**${a}:** ${l}
`}return n+=`

### \u{1F4BB} Informa\xE7\xF5es do Sistema
**User Agent:** ${navigator.userAgent}
**Plataforma:** ${navigator.platform}
**Mem\xF3ria:** ${performance.memory?`${Math.round(performance.memory.usedJSHeapSize/1024/1024)}MB / ${Math.round(performance.memory.totalJSHeapSize/1024/1024)}MB`:"N/A"}
**Tempo de Carregamento:** ${performance.now().toFixed(2)}ms
**URL Atual:** ${window.location.href}
**Timestamp Unix:** ${Date.now()}
**Timezone:** ${Intl.DateTimeFormat().resolvedOptions().timeZone}`,n+=`

---`,n}static async logChatOperation(t,e,r,i){let s=`\u{1F916} ${e}: ${JSON.stringify(r,null,2)}`;await this.logToFile(t,s,{...i,operation:"chat",metadata:{chatOperation:e,details:r}})}static async logApiOperation(t,e,r,i,s){let o=`\u{1F310} API ${e} - ${r}: ${JSON.stringify(i,null,2)}`;await this.logToFile(t,o,{...s,operation:"api",apiService:e,metadata:{apiOperation:r,service:e,details:i}})}static async logError(t,e,r,i){var a;let s=`\u274C ERRO: ${r||"Erro n\xE3o especificado"}`,o=new Error().stack,n=this.getCallStack();await this.logToFile(t,s,{...i,operation:"error",error:e,stackTrace:o,callStack:n,metadata:{errorContext:r,errorType:((a=e==null?void 0:e.constructor)==null?void 0:a.name)||"Unknown",errorMessage:(e==null?void 0:e.message)||(e==null?void 0:e.toString())||"Unknown error",errorCode:(e==null?void 0:e.code)||"N/A",errorStatus:(e==null?void 0:e.status)||"N/A",errorStatusText:(e==null?void 0:e.statusText)||"N/A"}})}static async logSettings(t,e,r){let i=`\u2699\uFE0F CONFIGURA\xC7\xD5ES: ${r||"Configura\xE7\xF5es carregadas"}`;await this.logToFile(t,i,{operation:"settings",settings:e,metadata:{settingsContext:r,settingsKeys:Object.keys(e)}})}static async logPerformance(t,e,r,i){let s=`\u26A1 PERFORMANCE: ${e} - ${r}ms`;await this.logToFile(t,s,{operation:"performance",duration:r,performanceMetrics:{[e]:r,...i},metadata:{performanceOperation:e,...i}})}static async logUserInput(t,e,r,i){let s=`\u{1F4DD} INPUT DO USU\xC1RIO: ${r||"Input capturado"}`;await this.logToFile(t,s,{...i,operation:"user_input",inputData:e,metadata:{inputContext:r,inputType:typeof e,inputLength:typeof e=="string"?e.length:JSON.stringify(e).length}})}static async logHttpRequest(t,e,r,i,s,o){let n=`\u{1F310} HTTP REQUEST: ${r} ${e}`;await this.logToFile(t,n,{...o,operation:"http_request",requestHeaders:i,requestBody:s,metadata:{url:e,method:r,hasBody:!!s,bodySize:s?JSON.stringify(s).length:0}})}static async logHttpResponse(t,e,r,i,s,o){let n=`\u{1F4E5} HTTP RESPONSE: ${r} ${e}`;await this.logToFile(t,n,{...o,operation:"http_response",responseHeaders:i,responseBody:s,metadata:{url:e,status:r,hasBody:!!s,bodySize:s?JSON.stringify(s).length:0}})}static async logSystemEvent(t,e,r,i){let s=`\u{1F527} EVENTO DO SISTEMA: ${e}`;await this.logToFile(t,s,{...i,operation:"system_event",systemState:{event:e,details:r,timestamp:new Date().toISOString()},metadata:{systemEvent:e,details:r}})}static async logUserAction(t,e,r,i){let s=`\u{1F464} A\xC7\xC3O DO USU\xC1RIO: ${e}`;await this.logToFile(t,s,{...i,operation:"user_action",userActions:[e],metadata:{userAction:e,details:r}})}static getCallStack(){return(new Error().stack||"").split(`
`).slice(2).map(e=>e.trim()).filter(e=>e.length>0)}static async ensureFolderExists(t,e){try{t.app.vault.getAbstractFileByPath(e)?console.log("\u2705 Pasta j\xE1 existe:",e):(await t.app.vault.createFolder(e),console.log("\u2705 Pasta criada:",e))}catch(r){throw console.error("\u274C Erro ao criar pasta:",r),r}}static async fallbackLog(t,e,r,i){try{let s="ChatGPT_MD/logs/chatbot-groq-fallback.md",o=new Date().toISOString(),n=this.createDetailedLogEntry(o,`FALLBACK: ${e}`,r);console.log("\u{1F504} Tentando gravar log de fallback em:",s),await this.ensureFolderExists(t,"ChatGPT_MD/logs");let a=t.app.vault.getAbstractFileByPath(s),l="";a instanceof Ee.TFile?(l=await t.app.vault.read(a),l+=`

`+n):l=`# Chatbot Groq - Log de Fallback

> Log de emerg\xEAncia gerado automaticamente pelo plugin ChatGPT MD Groq

---

${n}`,await t.app.vault.create(s,l),console.log("\u2705 Log de fallback gravado com sucesso")}catch(s){console.error("\u274C Erro no log de fallback:",s)}}static async testLog(t){try{console.log("\u{1F9EA} Iniciando teste de log detalhado..."),await this.logToFile(t,"\u{1F9EA} TESTE: Log detalhado est\xE1 funcionando corretamente!",{operation:"test",metadata:{testType:"basic",testTime:new Date().toISOString()}});let e=performance.now();await new Promise(i=>setTimeout(i,100));let r=performance.now()-e;return await this.logPerformance(t,"test-operation",r,{testType:"performance",artificialDelay:100}),await this.logError(t,new Error("Erro de teste simulado"),"Teste de sistema de erro",{operation:"test",metadata:{testType:"error-simulation"}}),await this.logUserInput(t,{message:"Teste de input",timestamp:new Date().toISOString()},"Teste de captura de input"),await this.logHttpRequest(t,"https://api.test.com","POST",{"Content-Type":"application/json"},{test:!0},{operation:"test",metadata:{testType:"http-request"}}),await this.logHttpResponse(t,"https://api.test.com",200,{"Content-Type":"application/json"},{success:!0},{operation:"test",metadata:{testType:"http-response"}}),await this.logSystemEvent(t,"test_event",{test:!0},{operation:"test",metadata:{testType:"system-event"}}),await this.logUserAction(t,"test_action",{test:!0},{operation:"test",metadata:{testType:"user-action"}}),console.log("\u2705 Teste de log detalhado conclu\xEDdo com sucesso"),!0}catch(e){return console.error("\u274C Teste de log detalhado falhou:",e),!1}}static async checkLogFile(t){var e,r;try{let i;t.serviceLocator?i=t.serviceLocator.getSettingsService().getSettings():i=(e=t.settings)!=null?e:{};let s=new Date().toISOString().split("T")[0],o=((r=i.detailedLogPath)==null?void 0:r.trim())||"ChatGPT_MD/logs",n=`chatbot-groq-${s}.md`,a=`${o}/${n}`,l=t.app.vault.getAbstractFileByPath(a);if(l instanceof Ee.TFile){let p=await t.app.vault.read(l),m=p.split(`
`).filter(_=>_.trim()),d=p.split("## \u{1F4DD}").length-1;console.log("\u{1F4C4} Arquivo de log detalhado encontrado:",a),console.log("\u{1F4CA} Total de linhas:",m.length),console.log("\u{1F4DD} Total de entradas de log:",d),console.log("\u{1F4C5} Data do arquivo:",s),console.log("\u{1F4CF} Tamanho do arquivo:",p.length,"caracteres");let I=p.split("## \u{1F4DD}").slice(-3);console.log("\u{1F4DD} \xDAltimas 3 entradas do log:"),I.forEach((_,G)=>{let O=_.split(`
`)[0];console.log(`   ${G+1}. ${O.substring(0,100)}...`)})}else console.log("\u274C Arquivo de log detalhado n\xE3o encontrado:",a),console.log("\u{1F4A1} Verifique se o log detalhado est\xE1 ativado nas configura\xE7\xF5es")}catch(i){console.error("\u274C Erro ao verificar arquivo de log:",i)}}static async listLogFiles(t){var e,r;try{let i;t.serviceLocator?i=t.serviceLocator.getSettingsService().getSettings():i=(e=t.settings)!=null?e:{};let s=((r=i.detailedLogPath)==null?void 0:r.trim())||"ChatGPT_MD/logs",o=t.app.vault.getFiles().filter(n=>n.path.startsWith(s)&&n.name.includes("chatbot-groq"));if(o.length>0){console.log("\u{1F4C1} Arquivos de log detalhado encontrados:");for(let n of o){let l=(await t.app.vault.read(n)).split("## \u{1F4DD}").length-1;console.log(`   \u{1F4C4} ${n.name} (${n.path}) - ${l} entradas`)}}else console.log("\u{1F4C1} Nenhum arquivo de log encontrado na pasta:",s)}catch(i){console.error("\u274C Erro ao listar arquivos de log:",i)}}};var b={aiService:f,frequency_penalty:0,max_tokens:200,model:"mixtral-8x7b-32768",presence_penalty:0,stream:!0,system_commands:null,tags:[],temperature:.5,title:"Untitled",top_p:1,url:"https://api.groq.com/openai/v1"},Et=async(c,t)=>{try{let e=new A;if(!D(t))return console.error("Groq API key is missing. Please add your Groq API key in the settings."),[];let r=new E,i=e.createAuthHeaders(t,f);return(await r.makeGetRequest(`${c}/models`,i,f)).data.filter(o=>(o.id.includes("llama3")||o.id.includes("mixtral")||o.id.includes("gemma")||o.id.includes("llama2"))&&!o.id.includes("embedding")).sort((o,n)=>o.id<n.id?1:o.id>n.id?-1:0).map(o=>o.id)}catch(e){return console.error("Error fetching Groq models:",e),[]}},Z=class extends ${constructor(e,r,i,s,o){super(e,r);this.serviceType=f;this.errorService=e||new T(this.notificationService),this.apiService=i||new E(this.errorService,this.notificationService),this.apiAuthService=s||new A(this.notificationService),this.apiResponseParser=o||new M(this.notificationService)}getDefaultConfig(){return b}getApiKeyFromSettings(e){return this.apiAuthService.getApiKey(e,f)}createPayload(e,r){let i=e.model.includes("@")?e.model.split("@")[1]:e.model,s=r;if(e.system_commands&&e.system_commands.length>0){let n=e.system_commands.map(a=>({role:W,content:a}));s=[...n,...r],console.log(`[ChatGPT MD] Added ${n.length} developer commands to messages`)}let o={model:i,messages:s,max_tokens:e.max_tokens,stream:e.stream};return i.includes("search")||(o.temperature=e.temperature,o.top_p=e.top_p,o.presence_penalty=e.presence_penalty,o.frequency_penalty=e.frequency_penalty),o}handleAPIError(e,r,i){let s={model:r.model,url:r.url,defaultUrl:b.url,aiService:f};return e instanceof Object&&r.url!==b.url?this.errorService.handleUrlError(r.url,b.url,f):this.errorService.handleApiError(e,f,{context:s,showNotification:!0,logToConsole:!0})}async callStreamingAPI(e,r,i,s,o,n){try{let{payload:a,headers:l}=this.prepareApiCall(e,r,i),p=this.apiResponseParser.insertAssistantHeader(s,o,a.model),m=await this.apiService.makeStreamingRequest(this.getApiEndpoint(i),a,l,this.serviceType),d=await this.apiResponseParser.processStreamResponse(m,this.serviceType,s,p,n,this.apiService);return this.processStreamingResult(d)}catch(a){return{fullString:`Error: ${a}`,mode:"streaming"}}}async callNonStreamingAPI(e,r,i){try{let{payload:s,headers:o}=this.prepareApiCall(e,r,i),n=await this.apiService.makeNonStreamingRequest(this.getApiEndpoint(i),s,o,this.serviceType);return this.apiResponseParser.parseNonStreamingResponse(n,this.serviceType)}catch(s){return this.handleApiCallError(s,i)}}showNoTitleInferredNotification(){var e;(e=this.notificationService)==null||e.showWarning("Could not infer title. The file name was not changed.")}addPluginSystemMessage(e){return e.some(i=>i.role==="system")?e:[{role:"system",content:Y},...e]}async testConfiguration(e){try{let r=this.getApiKeyFromSettings(e),i=this.getDefaultConfig();if(!r)return{success:!1,message:"\u274C API Key da Groq n\xE3o est\xE1 configurada no plugin."};console.log("[GroqService] Testing configuration:",{apiKey:r.substring(0,10)+"...",model:i.model,url:i.url,endpoint:this.getApiEndpoint(i)});let s=[{role:"user",content:"Hello, this is a test message."}],{payload:o,headers:n}=this.prepareApiCall(r,s,i);return console.log("[GroqService] Test payload:",o),console.log("[GroqService] Test headers:",{...n,Authorization:"Bearer ***"}),{success:!0,message:`\u2705 Configura\xE7\xE3o da Groq v\xE1lida!
Modelo: ${i.model}
URL: ${i.url}
Endpoint: ${this.getApiEndpoint(i)}`}}catch(r){return console.error("[GroqService] Configuration test failed:",r),{success:!1,message:`\u274C Erro na configura\xE7\xE3o da Groq: ${r}`}}}async chatWithFallback(e,r,i,s,o="mixtral-8x7b-32768"){var Ge,qe,Ue,Ve;let n=this.getApiKeyFromSettings(r),a="https://api.groq.com/openai/v1/chat/completions",l=s||r.groqModel||b.model,p=512,m=.7,d=!1;if(!n)throw new Error("\u274C API Key Groq ausente.");let I={model:l,messages:[{role:"system",content:"Voc\xEA \xE9 uma IA Groq no Obsidian."},{role:"user",content:e}],temperature:m,max_tokens:p,stream:d},_={Authorization:`Bearer ${n}`,"Content-Type":"application/json"};console.log("\u{1F50E} [Groq] Endpoint:",a),console.log("\u{1F50E} [Groq] Headers:",{..._,Authorization:"Bearer ***"}),console.log("\u{1F50E} [Groq] Payload:",I);let G=Date.now(),O,pe,Oe;try{O=await fetch(a,{method:"POST",headers:_,body:JSON.stringify(I)}),pe=await O.text();let oe=Date.now()-G;if(console.log("\u23F1\uFE0F [Groq] Lat\xEAncia:",oe,"ms"),console.log("\u{1F50E} [Groq] Status HTTP:",O.status),console.log("\u{1F50E} [Groq] Resposta:",pe),!O.ok)throw new Error(`Groq API ERROR ${O.status}: ${pe}`);return Oe=JSON.parse(pe),console.log("\u2705 Groq Resposta:",{model:l,...Oe}),(Ve=(Ue=(qe=(Ge=Oe.choices)==null?void 0:Ge[0])==null?void 0:qe.message)==null?void 0:Ue.content)!=null?Ve:"\u26A0\uFE0F Sem resposta da IA."}catch(oe){if(h.logError(i,oe,"Erro na chamada da API Groq",{operation:"groq_api_call_failed",requestBody:I,metadata:{model:l,endpoint:a}}),console.error(`\u274C [Groq] Erro com modelo ${l}:`,oe.message),l!==o&&o)return console.warn(`\u26A0\uFE0F [Groq] Tentando fallback com modelo: ${o}`),this.chatWithFallback(e,r,i,o,"");throw oe}}};var ee=class{constructor(t){this.app=t}getFrontmatter(t,e){let i=t.editor.getValue().match(q),s=i?ue(i[0]):{},o=e.defaultChatFrontmatter?ue(e.defaultChatFrontmatter):{},n={...e,...o,...s},a=n.aiService||ut(n.url,n.model)||ft(n)||u;return{...{[u]:C,[S]:N,[g]:R,[y]:w,[f]:b}[a]||C,...e,...o,...s,aiService:a}}updateFrontmatterField(t,e,r){let i=t.getValue(),s=i.match(q),o;if(s){let a=s[0].replace(/---/g,""),l=new RegExp(`^${e}:\\s*(.*)$`,"m");l.test(a)?a=a.replace(l,`${e}: ${r}`):a+=`
${e}: ${r}`,o=i.replace(q,`---${a}---`)}else o=`---
${e}: ${r}
---
${i}`;t.setValue(o)}objectToYamlFrontmatter(t){return`---
${Object.entries(t).map(([r,i])=>i==null?`${r}:`:typeof i=="string"?`${r}: "${i}"`:`${r}: ${i}`).join(`
`)}
---

`}generateFrontmatter(t,e={}){if(t.defaultChatFrontmatter){if(Object.keys(e).length>0){let o={...ue(t.defaultChatFrontmatter),...e};return this.objectToYamlFrontmatter(o)}return t.defaultChatFrontmatter+`

`}let r=e.aiService||u,i={stream:t.stream,...e};switch(r){case u:i={...i,model:C.model,temperature:C.temperature,top_p:C.top_p,max_tokens:C.max_tokens,presence_penalty:C.presence_penalty,frequency_penalty:C.frequency_penalty};break;case S:i={...i,model:N.model,url:N.url};break;case g:i={...i,model:R.model,temperature:R.temperature,top_p:R.top_p,max_tokens:R.max_tokens,presence_penalty:R.presence_penalty,frequency_penalty:R.frequency_penalty};break;case y:i={...i,model:w.model,url:w.url,temperature:w.temperature,top_p:w.top_p,max_tokens:w.max_tokens,presence_penalty:w.presence_penalty,frequency_penalty:w.frequency_penalty};break;case f:i={...i,model:b.model,url:b.url,temperature:b.temperature,top_p:b.top_p,max_tokens:b.max_tokens,presence_penalty:b.presence_penalty,frequency_penalty:b.frequency_penalty};break}return this.objectToYamlFrontmatter(i)}};var Te=class{constructor(t,e,r,i,s,o){this.app=t;this.fileService=e||new K(t),this.editorContentService=r||new J;let n=new P;this.messageService=i||new Q(this.fileService,n),this.frontmatterService=o||new ee(t),this.templateService=s||new X(t,this.fileService,this.editorContentService)}async writeInferredTitle(t,e){return this.fileService.writeInferredTitle(t,e)}async ensureFolderExists(t,e){return this.fileService.ensureFolderExists(t,e)}getDate(t,e){return this.fileService.formatDate(t,e)}addHorizontalRule(t,e,r){this.editorContentService.addHorizontalRule(t,e,r)}clearChat(t){this.editorContentService.clearChat(t)}moveCursorToEnd(t){this.editorContentService.moveCursorToEnd(t)}async getMessagesFromEditor(t,e){return this.messageService.getMessagesFromEditor(t,e)}async createNewChatFromTemplate(t,e){return this.templateService.createNewChatFromTemplate(t,e)}async createNewChatWithHighlightedText(t,e){return this.templateService.createNewChatWithHighlightedText(t,e)}getFrontmatter(t,e,r){return this.frontmatterService.getFrontmatter(t,e)}processResponse(t,e,r){this.messageService.processResponse(t,e,r)}setModel(t,e){this.frontmatterService.updateFrontmatterField(t,"model",e)}};var xe={apiKey:"",openrouterApiKey:"",groqApiKey:"",openaiUrl:C.url,openrouterUrl:R.url,ollamaUrl:N.url,lmstudioUrl:w.url,groqUrl:"https://api.groq.com/openai/v1",chatFolder:"ChatGPT_MD/chats",chatTemplateFolder:"ChatGPT_MD/templates",stream:!0,generateAtCursor:!1,autoInferTitle:!1,dateFormat:ge,headingLevel:at,inferTitleLanguage:lt,defaultChatFrontmatter:he,enableDetailedLog:!0,detailedLogPath:"",openai:C,openrouter:R,ollama:N,lmstudio:w,groq:b};var we=require("obsidian");var Ce=class extends we.PluginSettingTab{constructor(t,e,r){super(t,e),this.settingsProvider=r}display(){let{containerEl:t}=this;t.empty();let e=[{id:"enableDetailedLog",name:"Ativar log detalhado",description:"Registra todas as a\xE7\xF5es do plugin em um arquivo de log para depura\xE7\xE3o.",type:"toggle",group:"Log"},{id:"detailedLogPath",name:"Pasta para arquivos de log",description:"Pasta dentro do vault onde os arquivos de log ser\xE3o salvos. Deixe vazio para usar 'ChatGPT_MD/logs'. Os logs s\xE3o salvos como arquivos .md com data no nome.",type:"text",placeholder:"ChatGPT_MD/logs",group:"Log"},{id:"apiKey",name:"OpenAI API Key",description:"API Key for OpenAI",type:"text",placeholder:"your openAI API Key",group:"API Keys"},{id:"openrouterApiKey",name:"OpenRouter.ai API Key",description:"API Key for OpenRouter.ai",type:"text",placeholder:"your openRouter API Key",group:"API Keys"},{id:"groqApiKey",name:"Groq API Key",description:"API Key for Groq",type:"text",placeholder:"your groq API Key",group:"API Keys"},{id:"openaiUrl",name:"OpenAI API URL",description:`URL for OpenAI API
Default URL: ${C.url}`,type:"text",placeholder:C.url,group:"Service URLs"},{id:"openrouterUrl",name:"OpenRouter.ai API URL",description:`URL for OpenRouter.ai API
Default URL: ${R.url}`,type:"text",placeholder:R.url,group:"Service URLs"},{id:"ollamaUrl",name:"Ollama API URL",description:`URL for Ollama API
Default URL: ${N.url}`,type:"text",placeholder:N.url,group:"Service URLs"},{id:"lmstudioUrl",name:"LM Studio API URL",description:`URL for LM Studio API
Default URL: ${w.url}`,type:"text",placeholder:w.url,group:"Service URLs"},{id:"groqUrl",name:"Groq API URL",description:`URL for Groq API
Default URL: https://api.groq.com/openai/v1`,type:"text",placeholder:"https://api.groq.com/openai/v1",group:"Service URLs"},{id:"defaultChatFrontmatter",name:"Default Chat Frontmatter",description:"Default frontmatter for new chat files. You can change/use all of the settings exposed by the OpenAI API here: https://platform.openai.com/docs/api-reference/chat/create",type:"textarea",placeholder:he,group:"Chat Behavior"},{id:"stream",name:"Stream",description:"Stream responses from OpenAI",type:"toggle",group:"Chat Behavior"},{id:"generateAtCursor",name:"Generate at Cursor",description:"Generate text at cursor instead of end of file",type:"toggle",group:"Chat Behavior"},{id:"autoInferTitle",name:"Automatically Infer Title",description:"Automatically infer title after 4 messages have been exchanged",type:"toggle",group:"Chat Behavior"},{id:"chatFolder",name:"Chat Folder",description:"Path to folder for chat files",type:"text",group:"Folders"},{id:"chatTemplateFolder",name:"Chat Template Folder",description:"Path to folder for chat file templates",type:"text",placeholder:"chat-templates",group:"Folders"},{id:"dateFormat",name:"Date Format",description:"Date format for chat files. Valid date blocks are: YYYY, MM, DD, hh, mm, ss",type:"text",placeholder:ge,group:"Formatting"},{id:"headingLevel",name:"Heading Level",description:`Heading level for messages (example for heading level 2: '## ${x}${L}'). Valid heading levels are 0, 1, 2, 3, 4, 5, 6`,type:"text",group:"Formatting"},{id:"inferTitleLanguage",name:"Infer title language",description:"Language to use for title inference.",type:"dropdown",options:{"Portugu\xEAs Brasileiro":"Portugu\xEAs Brasileiro",English:"English",Japanese:"Japanese",Spanish:"Spanish",French:"French",German:"German",Chinese:"Chinese",Korean:"Korean",Italian:"Italian",Russian:"Russian"},group:"Formatting"}],r={};e.forEach(i=>{r[i.group]||(r[i.group]=[]),r[i.group].push(i)}),Object.entries(r).forEach(([i,s])=>{t.createEl("h3",{text:i}),s.forEach(o=>{this.createSettingElement(t,o)}),t.createEl("hr")})}createSettingElement(t,e){let r=new we.Setting(t).setName(e.name).setDesc(e.description);e.type==="text"?r.addText(i=>(i.setPlaceholder(e.placeholder||"").setValue(String(this.settingsProvider.settings[e.id])).onChange(async s=>{this.settingsProvider.settings[e.id]=s,await this.settingsProvider.saveSettings()}),i.inputEl.style.width="300px",i)):e.type==="textarea"?r.addTextArea(i=>(i.setPlaceholder(e.placeholder||"").setValue(String(this.settingsProvider.settings[e.id]||e.placeholder)).onChange(async s=>{this.settingsProvider.settings[e.id]=s,await this.settingsProvider.saveSettings()}),i.inputEl.style.width="300px",e.id==="defaultChatFrontmatter"&&(i.inputEl.style.height="260px",i.inputEl.style.minHeight="260px"),i)):e.type==="toggle"?r.addToggle(i=>i.setValue(!!this.settingsProvider.settings[e.id]).onChange(async s=>{this.settingsProvider.settings[e.id]=s,await this.settingsProvider.saveSettings()})):e.type==="dropdown"&&e.options&&r.addDropdown(i=>(i.addOptions(e.options||{}),i.setValue(String(this.settingsProvider.settings[e.id])),i.onChange(async s=>{this.settingsProvider.settings[e.id]=s,await this.settingsProvider.saveSettings()}),i.selectEl.style.width="300px",i))}};var _e=class{constructor(t,e=new P,r=new T(new P)){this.plugin=t;this.notificationService=e;this.errorService=r;this.settings=structuredClone(xe),this.loadSettings().catch(i=>this.notificationService.showError("Failed to load settings"))}getSettings(){return this.settings}async migrateSettings(){let t=[{setting:"ollamaUrl",pattern:/\/api\/$/,replacement:"",description:"Removing trailing /api/ from Ollama URL",introducedIn:"2.1.3"},{setting:"openrouterUrl",pattern:/\/api\/$/,replacement:"",description:"Removing trailing /api/ from OpenRouter URL",introducedIn:"2.1.3"},{setting:"openaiUrl",pattern:/\/$/,replacement:"",description:"Removing trailing slash from OpenAI URL",introducedIn:"2.1.3"}],e=!1;for(let r of t){let i=r.setting,s=this.settings[i];s&&r.pattern.test(s)&&(this.updateSettings({[i]:s.replace(r.pattern,r.replacement)}),console.log(`[ChatGPT MD] Migration (${r.introducedIn}): ${r.description}`),e=!0)}e&&(await this.saveSettings(),console.log("[ChatGPT MD] Migrated settings"))}async loadSettings(){let t=await this.plugin.loadData();return Object.assign(this.settings,xe,t),this.settings}async saveSettings(){await this.plugin.saveData(this.settings)}updateSettings(t){Object.assign(this.settings,t)}async addSettingTab(){await this.loadSettings(),this.plugin.addSettingTab(new Ce(this.plugin.app,this.plugin,{settings:this.settings,saveSettings:this.saveSettings.bind(this)}))}};var Me=class{constructor(t,e){this.aiServices=new Map;this.app=t,this.plugin=e,this.initializeServices()}initializeServices(){this.notificationService=new P,this.errorService=new T(this.notificationService),this.apiService=new E(this.errorService,this.notificationService),this.apiAuthService=new A(this.notificationService),this.apiResponseParser=new M(this.notificationService),this.fileService=new K(this.app),this.editorContentService=new J,this.messageService=new Q(this.fileService,this.notificationService),this.frontmatterService=new ee(this.app),this.templateService=new X(this.app,this.fileService,this.editorContentService),this.editorService=new Te(this.app,this.fileService,this.editorContentService,this.messageService,this.templateService,this.frontmatterService),this.settingsService=new _e(this.plugin,this.notificationService,this.errorService)}getAiApiService(t){if(this.aiServices.has(t))return this.aiServices.get(t);let e;switch(t){case u:e=new Se(this.errorService,this.notificationService,this.apiService,this.apiAuthService,this.apiResponseParser);break;case S:e=new ve(this.errorService,this.notificationService,this.apiService,this.apiAuthService,this.apiResponseParser);break;case g:e=new ye(this.errorService,this.notificationService,this.apiService,this.apiAuthService,this.apiResponseParser);break;case y:e=new Ae(this.errorService,this.notificationService,this.apiService,this.apiAuthService,this.apiResponseParser);break;case f:e=new Z(this.errorService,this.notificationService,this.apiService,this.apiAuthService,this.apiResponseParser);break;default:throw new Error(`Unknown AI service type: ${t}`)}return this.aiServices.set(t,e),e}getFileService(){return this.fileService}getEditorContentService(){return this.editorContentService}getMessageService(){return this.messageService}getTemplateService(){return this.templateService}getFrontmatterService(){return this.frontmatterService}getEditorService(){return this.editorService}getNotificationService(){return this.notificationService}getErrorService(){return this.errorService}getApiService(){return this.apiService}getApiAuthService(){return this.apiAuthService}getApiResponseParser(){return this.apiResponseParser}getSettingsService(){return this.settingsService}};var k=require("obsidian");var Re=require("obsidian"),ae=class extends Re.SuggestModal{constructor(t,e,r,i=[]){super(t),this.modelNames=i,this.editor=e,this.editorService=r,this.limit=this.modelNames.length,this.modelNames.length>0?this.setPlaceholder("Select Large Language Model"):this.setPlaceholder("Loading available models...")}getSuggestions(t){return this.modelNames.filter(e=>e.toLowerCase().includes(t.toLowerCase()))}renderSuggestion(t,e){e.createEl("div",{text:t})}onChooseSuggestion(t,e){this.modelNames.indexOf(t)===-1||this.modelNames.length===0||(new Re.Notice(`Selected model: ${t}`),this.editorService.setModel(this.editor,t))}};var Pe=class{constructor(t,e,r){this.aiService=null;this.availableModels=[];this.plugin=t,this.serviceLocator=e,this.settingsService=r,this.statusBarItemEl=t.addStatusBarItem(),this.apiAuthService=new A}registerCommands(){this.registerChatCommand(),this.registerSelectModelCommand(),this.registerAddDividerCommand(),this.registerAddCommentBlockCommand(),this.registerStopStreamingCommand(),this.registerInferTitleCommand(),this.registerMoveToNewChatCommand(),this.registerChooseChatTemplateCommand(),this.registerClearChatCommand()}registerChatCommand(){this.plugin.addCommand({id:We,name:"Chat",icon:"message-circle",editorCallback:async(t,e)=>{var n;let r="file"in e?this.plugin.app.workspace.getActiveViewOfType(k.MarkdownView):e;if(!r){console.error("[ChatGPT MD] No active MarkdownView found");return}let i=this.serviceLocator.getEditorService(),s=this.settingsService.getSettings(),o=i.getFrontmatter(r,s,this.plugin.app);this.aiService=this.serviceLocator.getAiApiService(o.aiService);try{let{messagesWithRole:a,messages:l}=await i.getMessagesFromEditor(t,s);if(s.generateAtCursor||i.moveCursorToEnd(t),o.aiService==="groq"&&typeof this.aiService.chatWithFallback=="function"){await this.handleGroqChat(a,o,s,t);return}k.Platform.isMobile?new k.Notice(`[ChatGPT MD] Calling ${o.model}`):this.updateStatusBar(`Calling ${o.model}`);let p=this.apiAuthService.getApiKey(s,o.aiService),m=await this.aiService.callAIAPI(a,o,V(s.headingLevel),this.getAiApiUrls(o)[o.aiService],t,s.generateAtCursor,p,s);if(i.processResponse(t,m,s),s.autoInferTitle&&gt((n=r==null?void 0:r.file)==null?void 0:n.basename,s.dateFormat)&&a.length>ct){let d={...o,openrouterApiKey:this.apiAuthService.getApiKey(s,g),url:this.getAiApiUrls(o)[o.aiService]};d.model||(console.log("[ChatGPT MD] Model not set for auto title inference, using default model"),o.aiService===u?d.model="gpt-4":o.aiService===S?d.model="llama2":o.aiService===g?d.model="anthropic/claude-3-opus:beta":o.aiService===y?d.model="local-model":o.aiService===f&&(d.model="llama3-70b-8192")),console.log("[ChatGPT MD] Auto-inferring title with settings:",{aiService:o.aiService,model:d.model}),await this.aiService.inferTitle(r,d,l,i)}}catch(a){k.Platform.isMobile&&new k.Notice(`[ChatGPT MD] Calling ${o.model}. `+a,9e3),console.log(a)}this.updateStatusBar("")}})}registerSelectModelCommand(){this.plugin.addCommand({id:"select-model-command",name:"Select Model",icon:"list",editorCallback:async(t,e)=>{let r="file"in e?this.plugin.app.workspace.getActiveViewOfType(k.MarkdownView):e;if(!r){console.error("[ChatGPT MD] No active MarkdownView found");return}let i=this.serviceLocator.getEditorService(),s=this.settingsService.getSettings(),o=new ae(this.plugin.app,t,i,this.availableModels);o.open(),(async()=>{try{let n=i.getFrontmatter(r,s,this.plugin.app),a=this.apiAuthService.getApiKey(s,u),l=this.apiAuthService.getApiKey(s,g),p=this.apiAuthService.getApiKey(s,f),m={[u]:n.openaiUrl||s.openaiUrl||C.url,[g]:n.openrouterUrl||s.openrouterUrl||R.url,[S]:n.ollamaUrl||s.ollamaUrl||N.url,[y]:n.lmstudioUrl||s.lmstudioUrl||w.url,[f]:n.groqUrl||s.groqUrl||b.url},d=await this.fetchAvailableModels(m,a,l,p),I=new Set(this.availableModels),_=new Set(d);(this.availableModels.length!==d.length||![...I].every(O=>_.has(O))||![..._].every(O=>I.has(O)))&&d.length>0&&(console.log("[ChatGPT MD] Models updated. Refreshing modal."),this.availableModels=d,o.close(),new ae(this.plugin.app,t,i,this.availableModels).open())}catch(n){console.error("[ChatGPT MD] Error fetching fresh models in background:",n)}})()}})}registerAddDividerCommand(){this.plugin.addCommand({id:je,name:"Add divider",icon:"minus",editorCallback:async(t,e)=>{let r=this.serviceLocator.getEditorService(),i=this.settingsService.getSettings();r.addHorizontalRule(t,L,i.headingLevel)}})}registerAddCommentBlockCommand(){this.plugin.addCommand({id:Ke,name:"Add comment block",icon:"comment",editorCallback:(t,e)=>{let r=t.getCursor(),i=r.line,s=r.ch,o=`${st}${v}${nt}`;t.replaceRange(o,r);let n={line:i+1,ch:s};t.setCursor(n)}})}registerStopStreamingCommand(){this.plugin.addCommand({id:ze,name:"Stop streaming",icon:"octagon",callback:()=>{this.aiService&&"stopStreaming"in this.aiService?this.aiService.stopStreaming():this.serviceLocator.getNotificationService().showWarning("No active streaming request to stop")}})}registerInferTitleCommand(){this.plugin.addCommand({id:Je,name:"Infer title",icon:"subtitles",editorCallback:async(t,e)=>{let r="file"in e?this.plugin.app.workspace.getActiveViewOfType(k.MarkdownView):e;if(!r){console.error("[ChatGPT MD] No active MarkdownView found");return}let i=this.serviceLocator.getEditorService(),s=this.settingsService.getSettings(),o=i.getFrontmatter(r,s,this.plugin.app);if(this.aiService=this.serviceLocator.getAiApiService(o.aiService),!o.model){console.log("[ChatGPT MD] Model not set in frontmatter, using default model");return}this.updateStatusBar(`Calling ${o.model}`);let{messages:n}=await i.getMessagesFromEditor(t,s),a={...s,...o,openrouterApiKey:this.apiAuthService.getApiKey(s,g),url:this.getAiApiUrls(o)[o.aiService]};await this.aiService.inferTitle(r,a,n,i),this.updateStatusBar("")}})}registerMoveToNewChatCommand(){this.plugin.addCommand({id:Ye,name:"Create new chat with highlighted text",icon:"highlighter",editorCallback:async(t,e)=>{let r=this.serviceLocator.getEditorService(),i=this.settingsService.getSettings();try{await r.createNewChatWithHighlightedText(t,i)}catch(s){console.error("[ChatGPT MD] Error in Create new chat with highlighted text",s),new k.Notice("[ChatGPT MD] Error in Create new chat with highlighted text, check console")}}})}registerChooseChatTemplateCommand(){this.plugin.addCommand({id:Qe,name:"Create new chat from template",icon:"layout-template",callback:async()=>{let t=this.serviceLocator.getEditorService(),e=this.settingsService.getSettings();if(e.dateFormat){await t.createNewChatFromTemplate(e,t.getDate(new Date,e.dateFormat));return}new k.Notice("date format cannot be empty in your ChatGPT MD settings. You can choose something like YYYYMMDDhhmmss")}})}registerClearChatCommand(){this.plugin.addCommand({id:Xe,name:"Clear chat (except frontmatter)",icon:"trash",editorCallback:async(t,e)=>{this.serviceLocator.getEditorService().clearChat(t)}})}getAiApiUrls(t){return{openai:t.openaiUrl||C.url,openrouter:t.openrouterUrl||R.url,ollama:t.ollamaUrl||N.url,lmstudio:t.lmstudioUrl||w.url,groq:t.groqUrl||"https://api.groq.com/openai/v1"}}async initializeAvailableModels(){console.log("[ChatGPT MD] Initializing available models...");try{let t=this.settingsService.getSettings(),e=this.apiAuthService.getApiKey(t,u),r=this.apiAuthService.getApiKey(t,g),i=this.apiAuthService.getApiKey(t,f),s={[u]:t.openaiUrl||C.url,[g]:t.openrouterUrl||R.url,[S]:t.ollamaUrl||N.url,[y]:t.lmstudioUrl||w.url,[f]:t.groqUrl||b.url};this.availableModels=await this.fetchAvailableModels(s,e,r,i),console.log(`[ChatGPT MD] Found ${this.availableModels.length} available models.`)}catch(t){console.error("[ChatGPT MD] Error initializing available models:",t),this.availableModels=[]}}async fetchAvailableModels(t,e,r,i){function s(o,n,a){return Promise.race([o,new Promise(l=>setTimeout(()=>l(a),n))])}try{let o=new A,n=[];return n.push(s(vt(t[S]),z,[])),n.push(s(At(t[y]),z,[])),D(e)&&n.push(s(St(t[u],e),z,[])),D(r)&&n.push(s(yt(t[g],r),z,[])),D(i)&&n.push(s(Et(t[f],i),z,[])),(await Promise.all(n)).flat()}catch(o){return new k.Notice("Error fetching models: "+(o instanceof Error?o.message:String(o))),console.error("Error fetching models:",o),[]}}async handleGroqChat(t,e,r,i){let s=this.aiService;try{let o=t.map(a=>`${a.role}: ${a.content}`).join(`
`),n=await s.chatWithFallback(o,r,this.plugin,e.model);return i&&typeof i.replaceSelection=="function"&&i.replaceSelection(`
Groq: ${n}
`),console.log("[Groq] Resposta inserida no editor:",n),n}catch(o){throw h.logError(this.plugin,o,"Erro em handleGroqChat",{operation:"groq_command_failed",metadata:{frontmatter:e}}),console.error("[Groq] Erro ao chamar chatWithFallback:",o),i&&typeof i.replaceSelection=="function"&&i.replaceSelection(`
[Erro Groq]: ${o.message||o}
`),o}}updateStatusBar(t){this.statusBarItemEl.setText(`[ChatGPT MD] ${t}`)}};var te=class{constructor(){this.messages=[]}addMessage(t,e){this.messages.push({role:t,content:e})}getContext(){return this.messages.map(t=>`${t.role}: ${t.content}`).join(`
`)}getMessages(){return[...this.messages]}reset(){this.messages=[]}getLastMessage(){return this.messages.length>0?this.messages[this.messages.length-1]:null}getMessageCount(){return this.messages.length}};var re=require("obsidian");var le=new te,ce=new P,Tt=new T(ce),Lt=new E(Tt,ce),Nt=new A(ce),Dt=new M(ce),Ft=new Z(Tt,ce,Lt,Nt,Dt);function Ct(c){c.addCommand({id:"enviar-msg-groq",name:"Enviar mensagem ao chatbot Groq",icon:"message-circle",editorCallback:async(t,e)=>{let r="";try{let i=c.serviceLocator.getSettingsService().getSettings();if(r=t.getSelection()||t.getValue(),!r.trim()){new re.Notice("\u26A0\uFE0F Por favor, selecione um texto ou digite uma mensagem.");return}le.addMessage("user",r),new re.Notice("\u{1F916} Processando com Groq...");let s=le.getMessages().map(l=>({role:l.role,content:l.content})),o={...b,...i.groq,stream:!1},n=i.groqApiKey,a=await Ft.callAIAPI(s,o,"\u{1F916} ",o.url,t,!1,n,i);if(a&&a.fullString){let l=a.fullString.replace(/^🤖\s*/,"").trim();le.addMessage("assistant",l);let m=t.getValue()+`

\u{1F464}: ${r}
\u{1F916}: ${l}
`;t.setValue(m),new re.Notice("\u2705 Resposta do Groq inserida!")}else throw new Error("Resposta vazia da API")}catch(i){console.error("Erro no chat interativo:",i);let s=i instanceof Error?i.message:"Falha na comunica\xE7\xE3o com Groq";new re.Notice(`\u274C Erro: ${s}`);let o="\u26A0\uFE0F Desculpe, n\xE3o consegui processar sua mensagem. Verifique sua conex\xE3o e tente novamente.";if(le.addMessage("assistant",o),r){let a=t.getValue()+`

\u{1F464}: ${r}
\u{1F916}: ${o}
`;t.setValue(a)}}}}),c.addCommand({id:"limpar-historico-chat",name:"Limpar hist\xF3rico do chat",icon:"trash-2",callback:()=>{le.reset(),new re.Notice("\u{1F9F9} Hist\xF3rico do chat limpo!")}})}var wt=require("obsidian");var ie="chatbot-groq-view",be=class extends wt.ItemView{constructor(e,r){super(e);this.chat=new te;this.notificationService=new P;this.errorService=new T(this.notificationService);this.apiService=new E(this.errorService,this.notificationService);this.apiAuthService=new A(this.notificationService);this.apiResponseParser=new M(this.notificationService);this.plugin=r,this.groq=this.plugin.serviceLocator.getAiApiService("groq"),console.log("\u{1F916} ChatView: Construtor chamado")}getViewType(){return ie}getDisplayText(){return"\u{1F916} Chatbot Groq"}async onOpen(){console.log("\u{1F916} ChatView: onOpen iniciado"),await h.logToFile(this.plugin,"\u{1F916} ChatView: Painel de chat aberto",{operation:"view_open",metadata:{viewType:this.getViewType(),displayText:this.getDisplayText(),chatSessionId:this.chat.getMessageCount()}});let e=this.containerEl.children[1];e.empty();let r=e.createDiv("chatbot-groq-container");r.style.cssText=`
      display: flex;
      flex-direction: column;
      height: 100%;
      padding: 16px;
      background: var(--background-primary);
      font-family: var(--font-text);
    `;let i=r.createDiv("chat-header");i.style.cssText=`
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 12px 16px;
      background: var(--background-secondary);
      border-radius: 12px 12px 0 0;
      border-bottom: 1px solid var(--background-modifier-border);
      margin-bottom: 0;
    `;let s=i.createEl("h3",{text:"\u{1F916} Chatbot Groq"});s.style.cssText=`
      margin: 0;
      color: var(--text-normal);
      font-size: 16px;
      font-weight: 600;
    `,this.clearBtn=i.createEl("button",{text:"\u{1F5D1}\uFE0F Limpar"}),this.clearBtn.style.cssText=`
      padding: 6px 12px;
      border-radius: 6px;
      border: 1px solid var(--background-modifier-border);
      background: var(--background-primary);
      color: var(--text-muted);
      cursor: pointer;
      font-size: 12px;
      transition: all 0.2s ease;
    `,this.clearBtn.onclick=()=>this.clearChat(),this.outputEl=r.createDiv("chat-output"),this.outputEl.style.cssText=`
      flex: 1;
      overflow-y: auto;
      background: var(--background-secondary);
      border-radius: 0 0 12px 12px;
      padding: 16px;
      margin-bottom: 16px;
      border: 1px solid var(--background-modifier-border);
      border-top: none;
      min-height: 300px;
      max-height: 500px;
    `,this.addWelcomeMessage(),this.inputContainer=r.createDiv("chat-input-container"),this.inputContainer.style.cssText=`
      display: flex;
      flex-direction: column;
      gap: 12px;
      background: var(--background-secondary);
      padding: 16px;
      border-radius: 12px;
      border: 1px solid var(--background-modifier-border);
    `,this.textareaEl=this.inputContainer.createEl("textarea"),this.textareaEl.placeholder="Digite sua pergunta... (Ctrl+Enter para enviar)",this.textareaEl.rows=3,this.textareaEl.style.cssText=`
      width: 100%;
      padding: 12px;
      border-radius: 8px;
      border: 2px solid var(--background-modifier-border);
      background: var(--background-primary);
      color: var(--text-normal);
      font-family: inherit;
      font-size: 14px;
      resize: vertical;
      min-height: 80px;
      transition: border-color 0.2s ease;
      box-sizing: border-box;
    `;let o=this.inputContainer.createDiv("button-container");o.style.cssText=`
      display: flex;
      gap: 8px;
      justify-content: flex-end;
    `,this.sendBtn=o.createEl("button",{text:"Enviar"}),this.sendBtn.style.cssText=`
      padding: 10px 20px;
      border-radius: 8px;
      border: none;
      background: var(--interactive-accent);
      color: var(--text-on-accent);
      cursor: pointer;
      font-weight: 600;
      font-size: 14px;
      transition: all 0.2s ease;
      min-width: 100px;
    `,this.statusEl=o.createEl("div",{text:"Pronto"}),this.statusEl.style.cssText=`
      padding: 10px 16px;
      border-radius: 8px;
      background: var(--background-primary);
      color: var(--text-muted);
      font-size: 12px;
      display: flex;
      align-items: center;
      min-width: 80px;
      justify-content: center;
    `,this.sendBtn.onclick=()=>this.sendPrompt(),this.textareaEl.addEventListener("keydown",n=>{n.key==="Enter"&&(n.ctrlKey||n.metaKey)&&(n.preventDefault(),this.sendPrompt())}),this.textareaEl.focus()}addWelcomeMessage(){let e=`
      <div style="text-align: center; padding: 20px; border-bottom: 1px solid var(--background-modifier-border); margin-bottom: 20px;">
        <h2 style="margin: 0 0 8px 0;">Bem-vindo ao Chatbot Groq</h2>
        <p style="margin: 0; color: var(--text-muted);">Fa\xE7a uma pergunta para come\xE7ar. Use Ctrl+Enter para enviar.</p>
      </div>
    `;this.outputEl.innerHTML=e}async clearChat(){let e=`msg_${Date.now()}`;await h.logChatOperation(this.plugin,"chat_cleared",{messageId:e,previousMessageCount:this.chat.getMessageCount()},{operation:"clear_chat",messageId:e}),this.chat.reset(),this.addWelcomeMessage(),this.updateStatus("Chat limpo","ready"),this.notificationService.showNotification("Chat limpo.")}updateStatus(e,r="ready"){this.statusEl.textContent=e}addMessage(e,r,i=!1){let s=this.outputEl.createEl("div",{cls:`chat-message ${r?"user-message":"bot-message"} ${i?"error-message":""}`}),o=`
      margin-bottom: 12px;
      padding: 12px 16px;
      border-radius: 12px;
      max-width: 85%;
      word-wrap: break-word;
      line-height: 1.5;
      font-size: 14px;
      position: relative;
    `;r?s.style.cssText=o+`
        background: linear-gradient(135deg, var(--interactive-accent), var(--interactive-accent-hover));
        color: var(--text-on-accent);
        margin-left: auto;
        border-bottom-right-radius: 6px;
      `:i?s.style.cssText=o+`
        background: var(--background-modifier-error);
        color: var(--text-error);
        border-left: 4px solid var(--text-error);
        margin-right: auto;
      `:s.style.cssText=o+`
        background: var(--background-primary-alt);
        color: var(--text-normal);
        margin-right: auto;
        border-left: 4px solid var(--text-muted);
      `;let n=r?"\u{1F464}":i?"\u274C":"\u{1F916}",a=r?"Voc\xEA":i?"Erro":"Groq";s.innerHTML=`
      <div style="font-weight: 600; margin-bottom: 4px; opacity: 0.8;">${n} ${a}</div>
      <div style="white-space: pre-wrap;">${e}</div>
    `}async sendPrompt(){var s;let e=performance.now(),r=this.textareaEl.value.trim();if(!r)return;let i=`msg_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;await h.logUserInput(this.plugin,{messageId:i,content:r,timestamp:new Date().toISOString()},"Mensagem do usu\xE1rio enviada"),this.chat.addMessage("user",r),this.addMessage(r,!0),this.textareaEl.value="",this.textareaEl.disabled=!0,this.sendBtn.disabled=!0,this.sendBtn.textContent="Processando...",this.updateStatus("Processando...","processing");try{let o=this.plugin.serviceLocator.getSettingsService().getSettings(),n=await this.groq.chatWithFallback(r,o,this.plugin);this.chat.addMessage("assistant",n),this.addMessage(n,!1),this.updateStatus("Resposta enviada","success"),await h.logChatOperation(this.plugin,"bot_response_processed",{messageId:i,responseLength:n.length},{operation:"chat_response",messageId:i})}catch(o){let n=o.message||"Falha na comunica\xE7\xE3o com Groq";this.addMessage(n,!1,!0),this.updateStatus("Erro","error"),await h.logError(this.plugin,o,"Erro no processamento da mensagem",{operation:"chat_error",messageId:i})}finally{this.textareaEl.disabled=!1,this.sendBtn.disabled=!1,this.sendBtn.textContent="Enviar",this.textareaEl.focus(),this.outputEl.scrollTop=this.outputEl.scrollHeight;let o=performance.now()-e;await h.logPerformance(this.plugin,"complete_chat_operation",o,{messageId:i,success:!((s=this.statusEl.textContent)!=null&&s.includes("Erro"))})}}async onClose(){await h.logToFile(this.plugin,"\u{1F6AA} ChatView: Painel de chat fechado",{operation:"view_close"}),console.log("ChatView fechado")}};var Ie=class extends F.Plugin{async onload(){await h.logToFile(this,"\u{1F680} Iniciando carregamento do plugin Chatbot Groq",{operation:"plugin_load_start",metadata:{pluginVersion:this.manifest.version,vaultName:this.app.vault.getName(),timestamp:new Date().toISOString()}}),this.loadStyles(),this.serviceLocator=new Me(this.app,this);let t=this.serviceLocator.getSettingsService();await t.loadSettings(),await t.migrateSettings(),await h.logSettings(this,t.getSettings(),"Configura\xE7\xF5es carregadas no startup"),await t.addSettingTab(),this.commandRegistry=new Pe(this,this.serviceLocator,t),this.commandRegistry.registerCommands(),Ct(this),this.registerView(ie,e=>new be(e,this)),this.addRibbonIcon("bot","Abrir Chatbot Groq",async()=>{await this.activateChatView()}),this.addCommand({id:"test-log-system",name:"Testar Sistema de Log Detalhado",callback:async()=>{if(!t.getSettings().enableDetailedLog){new F.Notice("\u274C Log detalhado est\xE1 desabilitado nas configura\xE7\xF5es!");return}await h.testLog(this)?new F.Notice("\u2705 Teste de log detalhado realizado com sucesso! Verifique o arquivo de log."):new F.Notice("\u274C Teste de log detalhado falhou! Verifique o console para detalhes.")}}),this.addCommand({id:"check-log-file",name:"Verificar Arquivo de Log Detalhado",callback:async()=>{await h.checkLogFile(this),new F.Notice("\u{1F4C4} Informa\xE7\xF5es do arquivo de log detalhado mostradas no console!")}}),this.addCommand({id:"list-log-files",name:"Listar Todos os Arquivos de Log",callback:async()=>{await h.listLogFiles(this),new F.Notice("\u{1F4C1} Lista de arquivos de log mostrada no console!")}}),this.addCommand({id:"test-all-log-types",name:"Testar Todos os Tipos de Log de Desenvolvedor",callback:async()=>{if(!t.getSettings().enableDetailedLog){new F.Notice("\u274C Log detalhado est\xE1 desabilitado nas configura\xE7\xF5es!");return}try{console.log("\u{1F9EA} Iniciando teste completo de todos os tipos de log..."),await h.logUserInput(this,{testType:"user_input_test",content:"Teste de input do usu\xE1rio",timestamp:new Date().toISOString()},"Teste de captura de input do usu\xE1rio"),await h.logHttpRequest(this,"https://api.test.com","POST",{"Content-Type":"application/json",Authorization:"Bearer test-token"},{test:!0,message:"Teste de requisi\xE7\xE3o HTTP"},{operation:"test",metadata:{testType:"http_request"}}),await h.logHttpResponse(this,"https://api.test.com",200,{"Content-Type":"application/json","X-Test-Header":"test-value"},{success:!0,data:"Teste de resposta HTTP"},{operation:"test",metadata:{testType:"http_response"}}),await h.logSystemEvent(this,"test_system_event",{testType:"system_event_test",timestamp:new Date().toISOString()},{operation:"test",metadata:{testType:"system_event"}}),await h.logUserAction(this,"test_user_action",{testType:"user_action_test",timestamp:new Date().toISOString()},{operation:"test",metadata:{testType:"user_action"}});let r=performance.now();await new Promise(s=>setTimeout(s,50));let i=performance.now()-r;await h.logPerformance(this,"test_performance",i,{testType:"performance_test",artificialDelay:50}),await h.logError(this,new Error("Erro de teste simulado para desenvolvedor"),"Teste de sistema de erro detalhado",{operation:"test",metadata:{testType:"error_simulation",errorPurpose:"developer_testing"}}),new F.Notice("\u2705 Teste completo de todos os tipos de log realizado com sucesso!"),console.log("\u2705 Teste completo de todos os tipos de log conclu\xEDdo com sucesso")}catch(r){console.error("\u274C Teste completo de log falhou:",r),new F.Notice("\u274C Teste completo de log falhou! Verifique o console para detalhes.")}}}),this.addCommand({id:"test-groq-configuration",name:"Testar Configura\xE7\xE3o da Groq",callback:async()=>{try{let e=t.getSettings(),r=this.serviceLocator.getAiApiService("groq");if(r&&typeof r.testConfiguration=="function"){let i=await r.testConfiguration(e);i.success?(new F.Notice("\u2705 "+i.message.split(`
`)[0]),console.log("\u2705 Teste da configura\xE7\xE3o da Groq:",i.message)):(new F.Notice("\u274C "+i.message),console.error("\u274C Teste da configura\xE7\xE3o da Groq falhou:",i.message))}else new F.Notice("\u274C Servi\xE7o Groq n\xE3o dispon\xEDvel para teste"),console.error("\u274C Servi\xE7o Groq n\xE3o dispon\xEDvel para teste")}catch(e){console.error("\u274C Erro ao testar configura\xE7\xE3o da Groq:",e),new F.Notice("\u274C Erro ao testar configura\xE7\xE3o da Groq: "+e)}}}),this.commandRegistry.initializeAvailableModels().catch(e=>{console.error("[ChatGPT MD] Error initializing models in background:",e),h.logError(this,e,"Erro ao inicializar modelos em background")}),await h.logToFile(this,"\u{1F680} Plugin Chatbot Groq inicializado com sucesso",{operation:"plugin_startup",metadata:{pluginVersion:this.manifest.version,vaultName:this.app.vault.getName(),servicesInitialized:{serviceLocator:!!this.serviceLocator,settingsService:!!t,commandRegistry:!!this.commandRegistry}}}),await h.logSystemEvent(this,"plugin_loaded",{pluginVersion:this.manifest.version,vaultName:this.app.vault.getName(),servicesInitialized:{serviceLocator:!!this.serviceLocator,settingsService:!!t,commandRegistry:!!this.commandRegistry},timestamp:new Date().toISOString()},{operation:"system_event",metadata:{eventType:"plugin_loaded",pluginVersion:this.manifest.version}}),console.log("\u{1F916} Plugin Chatbot Groq com painel lateral ativado")}loadStyles(){let t=document.createElement("link");t.rel="stylesheet",t.href=this.app.vault.adapter.getResourcePath("styles.css"),document.head.appendChild(t)}async activateChatView(){await h.logUserAction(this,"activate_chat_view",{timestamp:new Date().toISOString()},{operation:"user_action",metadata:{actionType:"activate_chat_view"}});let t=this.app.workspace.getLeavesOfType(ie);if(t.length===0){let e=this.app.workspace.getRightLeaf(!1);e?(await e.setViewState({type:ie,active:!0}),await h.logSystemEvent(this,"chat_view_activated",{method:"new_leaf",timestamp:new Date().toISOString()},{operation:"system_event",metadata:{eventType:"chat_view_activated",method:"new_leaf"}})):(new F.Notice("N\xE3o foi poss\xEDvel abrir o painel lateral do Chatbot."),await h.logError(this,new Error("Falha ao abrir painel"),"N\xE3o foi poss\xEDvel abrir o painel lateral",{operation:"error",metadata:{errorType:"view_activation_failed",reason:"no_right_leaf_available"}}))}else this.app.workspace.revealLeaf(t[0]),await h.logSystemEvent(this,"chat_view_revealed",{method:"reveal_existing",timestamp:new Date().toISOString()},{operation:"system_event",metadata:{eventType:"chat_view_revealed",method:"reveal_existing"}})}onunload(){h.logToFile(this,"\u{1F504} Iniciando desligamento do plugin Chatbot Groq",{operation:"plugin_unload_start",metadata:{shutdownTime:new Date().toISOString(),reason:"plugin_unload"}}),this.app.workspace.getLeavesOfType(ie).forEach(t=>t.detach()),h.logSystemEvent(this,"plugin_unloaded",{shutdownTime:new Date().toISOString(),reason:"plugin_unload",timestamp:new Date().toISOString()},{operation:"system_event",metadata:{eventType:"plugin_unloaded",reason:"plugin_unload"}}),h.logToFile(this,"\u{1F504} Plugin Chatbot sendo descarregado",{operation:"plugin_shutdown",metadata:{shutdownTime:new Date().toISOString(),reason:"plugin_unload"}}),console.log("\u{1F9F9} Plugin Chatbot descarregado")}};
